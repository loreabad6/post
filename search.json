[{"path":"https://loreabad6.github.io/post/CONTRIBUTING.html","id":"structured-commit-messages","dir":"","previous_headings":"","what":"Structured commit messages","title":"NA","text":"commiting changes git commit try use structured commit messages, adapted https://www.conventionalcommits.org/. first line commit message following format: summary short (preferably < 50 characters), starting upper case, written present tense. commit references specific issue, include Refs #<issue number> summary. issue bug report, may also use Fix #<issue number> issue gets closed automatically. type one defined types listed . feel artistic, can end commit message emoji belonging type üòé. feat: Implementation new feature. :gift: üéÅ fix: bug fix. :wrench: üîß style: Changes code formatting. change program logic. :art: üé® refactor: Changes existing functionality change behaviour. :construction: üöß breaking: Changes existing functionality backwards compatible. :warning: ‚ö†Ô∏è docs: Adding, removing updating user documentation. :books: üìö logs: Adding, removing updating log messages. :sound: üîâ test: Adding, removing updating tests. changes user code. :test_tube: üß™ cicd: Adding, removing updating CI/CD workflows. changes user code. :robot: ü§ñ deps: Adding, removing updating dependencies. :couple: üë´ release: Preparing release, e.g.¬†updating version numbers. :bookmark: üîñ repo: Changes repository involve code/documentation, e.g.¬†adding templates community files. :package: üì¶ Example commit messages :","code":"<type>: <summary> git commit -m 'feat: Add bar parameter to foo(). Refs #10 :gift:' git commit -m 'fix: Include type checking in foo(). Fix #12 :wrench:'"},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"‚ÄúLicense‚Äù shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. ‚ÄúLicensor‚Äù shall mean copyright owner entity authorized copyright owner granting License. ‚ÄúLegal Entity‚Äù shall mean union acting entity entities control, controlled , common control entity. purposes definition, ‚Äúcontrol‚Äù means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. ‚Äú‚Äù (‚Äú‚Äù) shall mean individual Legal Entity exercising permissions granted License. ‚ÄúSource‚Äù form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. ‚ÄúObject‚Äù form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. ‚ÄúWork‚Äù shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). ‚ÄúDerivative Works‚Äù shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. ‚ÄúContribution‚Äù shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, ‚Äúsubmitted‚Äù means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner ‚ÄúContribution.‚Äù ‚ÄúContributor‚Äù shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes ‚ÄúNOTICE‚Äù text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) ‚Äú‚Äù BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don‚Äôt include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included ‚Äúprinted page‚Äù copyright notice easier identification within third-party archives.","code":"Copyright 2024 post authors  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"vector-data-cubes","dir":"Articles","previous_headings":"","what":"Vector data cubes","title":"Post objects - Vector data cube structures","text":"Data cubes multi-dimensional data structures. commonly known data cubes, particularly Earth observation (EO), raster data cubes. Raster data cubes structures frequently used organise time series satellite imagery, gridded climate data, etc. minimum two spatial dimensions: longitude x latitude y. remainder dimensions can either time, dimension bands EO data.   hand, vector data cubes support one minimum spatial dimension, geometry. Representing data vector data cubes becomes useful thematic variables changing time vector locations, .e.¬†spatio-temporal data. example, time series temperature, precipitation, wind speed, etc. recorded climate stations can represented analysed using vector data cubes. However, current implementations vector data cubes support static geometries (e.g.¬†climate stations stay place time). post intends provide support also geometries change time.","code":""},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post-classes","dir":"Articles","previous_headings":"","what":"Post classes","title":"Post objects - Vector data cube structures","text":"R, vector data cube structures supported form array objects stars package tabular objects1 cubble package. sf used cubble stars handle spatial dimensions. Finally, stars cubble support certain tidyverse functions. post combines advantages packages support vector data cubes structure analyse polygon geometry time series. , two classes provided: post_array post_table.  post_array inherits stars class therefore supports stars methods, including print method. post_table inherits cubble class subclasses spatial_cubble_df temporal_cubble_df. Likewise, supports cubble methods retains cubble print methods.","code":"library(post) library(cubble) library(stars) library(sf) library(tidyverse) methods(class = \"post_array\") #>  [1] [             as_post_array as_post_table filter        mutate        #>  [6] rename        select        slice         st_as_sf      transmute     #> see '?methods' for accessing help and source code methods(class = \"post_table\") #>  [1] arrange            as_post_array      as_post_table      dplyr_reconstruct  #>  [5] face_spatial       face_temporal      filter             mutate             #>  [9] rename             select             slice              spatial            #> [13] st_as_sf           st_crs<-           st_normalize       st_shift_longitude #> [17] st_transform       st_wrap_dateline   st_zm              #> see '?methods' for accessing help and source code"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"creation-and-structure","dir":"Articles","previous_headings":"","what":"Creation and structure","title":"Post objects - Vector data cube structures","text":"showcase data structure post objects dummy dataset provided package (?polygons). data 5 objects unique group identifier changes shape different timestamps.  create post object group identifier (group_id) always required2. identifier unique per feature within group exist duplicated timestamps. converting sf object post object, necessary arguments automatically identified supplied. post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group. extract summary changing geometries post_array objects use: array format include group identifiers data structure directly, since represented summary geometry. However, identifiers stored metadata can obtained : post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube. extract summary changing geometries post_table objects use:","code":"polygons #> Simple feature collection with 25 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    gid   datetime                       geometry #> 1    a 2020-10-01 POLYGON ((0.5474949 0.80889... #> 2    b 2020-10-01 POLYGON ((0.2791708 0.83373... #> 3    c 2020-10-01 POLYGON ((0.2807462 0.62779... #> 4    d 2020-10-01 POLYGON ((0.7650701 0.47444... #> 5    e 2020-10-01 POLYGON ((0.3825692 0.35378... #> 6    a 2020-10-02 POLYGON ((0.4961102 0.87283... #> 7    b 2020-10-02 POLYGON ((0.3298312 0.76120... #> 8    c 2020-10-02 POLYGON ((0.328914 0.568743... #> 9    d 2020-10-02 POLYGON ((0.7217233 0.52617... #> 10   e 2020-10-02 POLYGON ((0.3101455 0.31689... plot(polygons) (arr = as_post_array(polygons)) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date FALSE #>                                                            values #> geom_sum POINT (0.647816 0.9018588),...,POINT (0.4690683 0.17772) #> datetime                                                     NULL class(arr) #> [1] \"post_array\" \"stars\" # changing geometry arr$geometry #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... # summary geometry st_geometry(arr) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.002543201 ymin: 0.17772 xmax: 0.752585 ymax: 0.9018588 #> Geodetic CRS:  WGS 84 #> POINT (0.647816 0.9018588) #> POINT (-0.002543201 0.8403816) #> POINT (0.3897167 0.5412363) #> POINT (0.752585 0.3538271) #> POINT (0.4690683 0.17772) get_group_ids(arr) #>   gid #> 1   a #> 2   b #> 3   c #> 4   d #> 5   e (tab = as_post_table(polygons)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [0, 0.18, 0.75, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.648   0.902     (0.647816 0.9018588) <sf [5 √ó 2]> #> 2 b     -0.00254 0.840 (-0.002543201 0.8403816) <sf [5 √ó 2]> #> 3 c      0.390   0.541    (0.3897167 0.5412363) <sf [5 √ó 2]> #> 4 d      0.753   0.354     (0.752585 0.3538271) <sf [5 √ó 2]> #> 5 e      0.469   0.178      (0.4690683 0.17772) <sf [5 √ó 2]> class(tab) #> [1] \"post_table\"        \"spatial_cubble_df\" \"cubble_df\"         #> [4] \"sf\"                \"tbl_df\"            \"tbl\"               #> [7] \"data.frame\" (tab_temp = face_temporal(tab)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows class(tab_temp) #> [1] \"post_table\"         \"temporal_cubble_df\" \"cubble_df\"          #> [4] \"sf\"                 \"tbl_df\"             \"tbl\"                #> [7] \"data.frame\" # changing geometry st_geometry(tab) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.002543201 ymin: 0.17772 xmax: 0.752585 ymax: 0.9018588 #> Geodetic CRS:  WGS 84 #> POINT (0.647816 0.9018588) #> POINT (-0.002543201 0.8403816) #> POINT (0.3897167 0.5412363) #> POINT (0.752585 0.3538271) #> POINT (0.4690683 0.17772) # summary geometry st_geometry(tab_temp) #> Geometry set for 25 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.4961102 0.8728385, 0.4361026 0.9477... #> POLYGON ((0.5578801 0.8616378, 0.5623908 1.0854... #> POLYGON ((0.5652241 0.872057, 0.5685463 1.03689... #> POLYGON ((0.6063791 0.8304178, 0.5463715 0.9053..."},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post_array-objects","dir":"Articles","previous_headings":"","what":"post_array objects","title":"Post objects - Vector data cube structures","text":"post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group. extract summary changing geometries post_array objects use: array format include group identifiers data structure directly, since represented summary geometry. However, identifiers stored metadata can obtained :","code":"(arr = as_post_array(polygons)) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date FALSE #>                                                            values #> geom_sum POINT (0.647816 0.9018588),...,POINT (0.4690683 0.17772) #> datetime                                                     NULL class(arr) #> [1] \"post_array\" \"stars\" # changing geometry arr$geometry #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... # summary geometry st_geometry(arr) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.002543201 ymin: 0.17772 xmax: 0.752585 ymax: 0.9018588 #> Geodetic CRS:  WGS 84 #> POINT (0.647816 0.9018588) #> POINT (-0.002543201 0.8403816) #> POINT (0.3897167 0.5412363) #> POINT (0.752585 0.3538271) #> POINT (0.4690683 0.17772) get_group_ids(arr) #>   gid #> 1   a #> 2   b #> 3   c #> 4   d #> 5   e"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post_table-objects","dir":"Articles","previous_headings":"","what":"post_table objects","title":"Post objects - Vector data cube structures","text":"post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube. extract summary changing geometries post_table objects use:","code":"(tab = as_post_table(polygons)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [0, 0.18, 0.75, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.648   0.902     (0.647816 0.9018588) <sf [5 √ó 2]> #> 2 b     -0.00254 0.840 (-0.002543201 0.8403816) <sf [5 √ó 2]> #> 3 c      0.390   0.541    (0.3897167 0.5412363) <sf [5 √ó 2]> #> 4 d      0.753   0.354     (0.752585 0.3538271) <sf [5 √ó 2]> #> 5 e      0.469   0.178      (0.4690683 0.17772) <sf [5 √ó 2]> class(tab) #> [1] \"post_table\"        \"spatial_cubble_df\" \"cubble_df\"         #> [4] \"sf\"                \"tbl_df\"            \"tbl\"               #> [7] \"data.frame\" (tab_temp = face_temporal(tab)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows class(tab_temp) #> [1] \"post_table\"         \"temporal_cubble_df\" \"cubble_df\"          #> [4] \"sf\"                 \"tbl_df\"             \"tbl\"                #> [7] \"data.frame\" # changing geometry st_geometry(tab) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.002543201 ymin: 0.17772 xmax: 0.752585 ymax: 0.9018588 #> Geodetic CRS:  WGS 84 #> POINT (0.647816 0.9018588) #> POINT (-0.002543201 0.8403816) #> POINT (0.3897167 0.5412363) #> POINT (0.752585 0.3538271) #> POINT (0.4690683 0.17772) # summary geometry st_geometry(tab_temp) #> Geometry set for 25 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.4961102 0.8728385, 0.4361026 0.9477... #> POLYGON ((0.5578801 0.8616378, 0.5623908 1.0854... #> POLYGON ((0.5652241 0.872057, 0.5685463 1.03689... #> POLYGON ((0.6063791 0.8304178, 0.5463715 0.9053..."},{"path":"https://loreabad6.github.io/post/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lorena Abad. Author, maintainer.","code":""},{"path":"https://loreabad6.github.io/post/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abad L (2024). post: Polygon changes space time. R package version 0.0.0.9000, https://loreabad6.github.io/post/.","code":"@Manual{,   title = {post: Polygon changes in space and time},   author = {Lorena Abad},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://loreabad6.github.io/post/}, }"},{"path":"https://loreabad6.github.io/post/index.html","id":"post-polygon-changes-in-space-and-time-","dir":"","previous_headings":"","what":"Polygon changes in space and time","title":"Polygon changes in space and time","text":"goal post provide array tabular vector data cube structures organise analyse polygons change shape space time.","code":""},{"path":"https://loreabad6.github.io/post/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Polygon changes in space and time","text":"can install development version post like : post currently work progress repository holds first implementation along issues possible features integration packages cubble, stars stampr. Stay tuned!","code":"remotes::install_github(\"loreabad6/post\")"},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a post_array object ‚Äî as_post_array","title":"Create a post_array object ‚Äî as_post_array","text":"post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a post_array object ‚Äî as_post_array","text":"","code":"as_post_array(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   geometry_summary_name = NULL,   ... )  # S3 method for class 'sf' as_post_array(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   geometry_summary_name = NULL,   ...,   point_st = c(TRUE, FALSE) )  # S3 method for class 'post_table' as_post_array(x, ...)  # S3 method for class 'post_array' as_post_array(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a post_array object ‚Äî as_post_array","text":"x object convert post_array POLYGON/MULTIPOLYGON geometries date/time column. group_id See Details. Defaults first non-spatial, non-temporal column x. time_column_name (character) name column temporal dimension information. Defaults first temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. geometry_summary (function) function compute summary geometry. Alternatively sfc object summary geometries (.e., result summarise_geometry_*() function custom sfc). See summarise_geometry functions pass summarise_geometry function. geometry_summary_name (character) name column summary geometries.Defaults \"geom_sum\" ... additional parameters passed geometry_summary function. point_st point argument passed onto stars::st_dimensions(). Defaults TRUE spatial dimension FALSE temporal dimension (assumes interval times)","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a post_array object ‚Äî as_post_array","text":"object class post_array.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a post_array object ‚Äî as_post_array","text":"group_id name column containing grouping identifier changing polygons vector group identifiers. Character, integer, double factor vectors supported. vector length 1 nrow(x). vector length 1 repeats value rows. Providing vector assumes ordering groups correct duplicated timestamps per group","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a post_array object ‚Äî as_post_array","text":"Abad, L., Sudmanns, M., H√∂lbling, D. (2024) Vector data cubes features evolving space time, AGILE GIScience Ser., 5, 16, https://doi.org/10.5194/agile-giss-5-16-2024","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a post_array object ‚Äî as_post_array","text":"","code":"as_post_array(polygons) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date FALSE #>                                                            values #> geom_sum POINT (0.647816 0.9018588),...,POINT (0.4690683 0.17772) #> datetime                                                     NULL  if(require(dplyr, quietly = TRUE)) {   library(sf, quietly = TRUE)   polygons |>     mutate(area = st_area(geometry)) |>     as_post_array(      geometry_summary = summarise_geometry_union    ) } #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :25   Min.   :5.366e+07   #>  epsg:4326    : 0   1st Qu.:3.928e+08   #>  +proj=long...: 0   Median :4.060e+08   #>                     Mean   :6.216e+08   #>                     3rd Qu.:6.933e+08   #>                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date FALSE #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL"},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a post_table object ‚Äî as_post_table","title":"Create a post_table object ‚Äî as_post_table","text":"post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a post_table object ‚Äî as_post_table","text":"","code":"as_post_table(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   ... )  # S3 method for class 'sf' as_post_table(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   ... )  # S3 method for class 'post_array' as_post_table(x, ..., drop_empty = TRUE)  # S3 method for class 'post_table' as_post_table(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a post_table object ‚Äî as_post_table","text":"x object convert post_table POLYGON/MULTIPOLYGON geometries date/time column. group_id See Details. Defaults first non-spatial, non-temporal column x. time_column_name (character) name column temporal dimension information. Defaults first temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. geometry_summary (function) function compute summary geometry. Alternatively sfc object summary geometries (.e., result summarise_geometry_*() function custom sfc). See summarise_geometry functions pass summarise_geometry function. ... additional parameters passed geometry_summary function. drop_empty (logical) empty geometries dropped post_table creation? Defaults TRUE","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a post_table object ‚Äî as_post_table","text":"object class post_table.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a post_table object ‚Äî as_post_table","text":"group_id name column containing grouping identifier changing polygons vector group identifiers. Character, integer, double factor vectors supported. vector length 1 nrow(x). vector length 1 repeats value rows. Providing vector assumes ordering groups correct duplicated timestamps per group","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a post_table object ‚Äî as_post_table","text":"Abad, L., Sudmanns, M., H√∂lbling, D. (2024) Vector data cubes features evolving space time, AGILE GIScience Ser., 5, 16, https://doi.org/10.5194/agile-giss-5-16-2024","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a post_table object ‚Äî as_post_table","text":"","code":"as_post_table(polygons) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [0, 0.18, 0.75, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.648   0.902     (0.647816 0.9018588) <sf [5 √ó 2]> #> 2 b     -0.00254 0.840 (-0.002543201 0.8403816) <sf [5 √ó 2]> #> 3 c      0.390   0.541    (0.3897167 0.5412363) <sf [5 √ó 2]> #> 4 d      0.753   0.354     (0.752585 0.3538271) <sf [5 √ó 2]> #> 5 e      0.469   0.178      (0.4690683 0.17772) <sf [5 √ó 2]>  if(require(dplyr, quietly = TRUE)) {   library(sf, quietly = TRUE)   polygons |>     mutate(area = st_area(geometry)) |>     as_post_table(      geometry_summary = summarise_geometry_union    ) } #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.3, 0, 0.97, 1.15], WGS 84 #> # temporal: datetime [date], area [[m^2]], geometry [POLYGON [¬∞]] #>   gid       long   lat                                            geom_sum ts    #> * <chr>    <dbl> <dbl>                                       <POLYGON [¬∞]> <lis> #> 1 a      0.648   0.902 ((0.4971355 0.8717961, 0.5474949 0.8088912, 0.5905‚Ä¶ <sf>  #> 2 b     -0.00254 0.840 ((-0.1774445 0.5995572, -0.1843257 0.5881332, 0.37‚Ä¶ <sf>  #> 3 c      0.390   0.541 ((0.28657 0.6085207, 0.2663408 0.6222649, 0.214584‚Ä¶ <sf>  #> 4 d      0.753   0.354 ((0.5737123 0.4613799, 0.6063966 0.4263975, 0.5272‚Ä¶ <sf>  #> 5 e      0.469   0.178 ((0.2973931 0.2557416, 0.2813385 0.2544898, 0.2452‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cubble attributes ‚Äî cubble-attrs","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"Extract cubble attributes","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"","code":"# S3 method for class 'post_table' spatial(data)"},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"data post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":null,"dir":"Reference","previous_headings":"","what":"Face spatial/temporal method for post_table ‚Äî cubble-face","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"face_spatial pivots post_table object long (temporal) nested (spatial) form. face_temporal() pivots post_table object nested (spatial) long (temporal) form. post_table objects, activates changing geometry long form.","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"","code":"# S3 method for class 'post_table' face_spatial(data)  # S3 method for class 'post_table' face_temporal(data, col)"},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"data post_table object col see cubble::face_temporal() details.","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr methods for post_array ‚Äî dplyr-post-array","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"dplyr methods post_array","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"","code":"# S3 method for class 'post_array' filter(.data, ...)  # S3 method for class 'post_array' mutate(.data, ...)  # S3 method for class 'post_array' rename(.data, ...)  # S3 method for class 'post_array' select(.data, ...)  # S3 method for class 'post_array' slice(.data, ...)  # S3 method for class 'post_array' transmute(.data, ...)"},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"... see corresponding function package dplyr data, .data post_array object","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"See ?stars::dplyr details","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr methods for post_table ‚Äî dplyr-post-table","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"dplyr methods post_table","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"","code":"# S3 method for class 'post_table' dplyr_reconstruct(data, template)  # S3 method for class 'post_table' arrange(.data, ...)  # S3 method for class 'post_table' filter(.data, ...)  # S3 method for class 'post_table' mutate(.data, ...)  # S3 method for class 'post_table' rename(.data, ...)  # S3 method for class 'post_table' select(.data, ...)  # S3 method for class 'post_table' slice(.data, ..., .dots)"},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"data, .data post_table object template Template data frame use restoring attributes. ... see corresponding function package dplyr .dots see corresponding function package dplyr","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"See ??cubble::dplyr details See ?sf::tidyverse details","code":""},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Random polygons to exemplify post functions ‚Äî polygons","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"Five random polygons 5 time-stamp states artificially generated exemplify main functionality post. See data-raw/polygons.R code creation.","code":""},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"","code":"polygons"},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"object class sf POLYGON geometries, Date 25 rows 3 columns: gid ID polygon geometry datetime datetime polygon geometry geometry geometry list column","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"sf methods for post_array objects ‚Äî sf-post-array","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"sf methods post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"","code":"# S3 method for class 'post_array' st_as_sf(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"x post_array object ... arguments passed sf::st_as_sf()","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"sf::st_as_sf() post_array objects sets changing geometry active sf_column keeps summarised geometry separate column.","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":null,"dir":"Reference","previous_headings":"","what":"sf methods for post_table objects ‚Äî sf-post-table","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"sf methods post_table objects","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"","code":"# S3 method for class 'post_table' st_as_sf(x, ...)  # S3 method for class 'post_table' st_crs(x) <- value  # S3 method for class 'post_table' st_normalize(   x,   domain = st_bbox(suppressMessages(face_spatial(x), \"cliMessage\")),   ... )  # S3 method for class 'post_table' st_shift_longitude(x, ...)  # S3 method for class 'post_table' st_transform(x, crs, ...)  # S3 method for class 'post_table' st_wrap_dateline(x, ...)  # S3 method for class 'post_table' st_zm(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"x post_table object ... additional arguments passed onto respective sf function value one () character: string accepted GDAL, (ii) integer, valid EPSG value (numeric), (iii) object class crs. domain domain x normalized length 4 vector form c(xmin, ymin, xmax, ymax). Defaults bounding box x crs target coordinate reference system: object class crs, input string st_crs","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"sf::st_as_sf() post_table objects sets changing geometry active sf_column keeps summarised geometry separate column. st_normalize() takes domain bounding box post_table nested form (spatial face)","code":""},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":null,"dir":"Reference","previous_headings":"","what":"stars methods for post_array objects ‚Äî stars","title":"stars methods for post_array objects ‚Äî stars","text":"stars methods post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stars methods for post_array objects ‚Äî stars","text":"","code":"# S3 method for class 'post_array' x[...]"},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stars methods for post_array objects ‚Äî stars","text":"x post_array object ... additional arguments passed onto respective stars function","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"Changing geometries summarised time periods single geometry (types POINT, POLYGON, MULTIPOLYGON) order pass spatial dimension post_* objects. summarise_geometry_union computes geometry summary union dissolve changing geometries summarise_geometry_centroid computes geometry summary centroid union dissolve changing geometries summarise_geometry_bbox computes geometry summary bounding box union dissolve changing geometries","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"","code":"summarise_geometry_union(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )  summarize_geometry_union(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )  summarise_geometry_centroid(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )  summarize_geometry_centroid(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )  summarise_geometry_bbox(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )  summarize_geometry_bbox(   x,   group_id = NULL,   sf_column_name = NULL,   .checks = TRUE )"},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"x object POLYGON/MULTIPOLYGON changing geometries summarise based group_id. group_id see ?post_array details. Defaults first non-spatial, non-temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. .checks internal, creation arguments checked?","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"object class sfc summarised geometries based group_id","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"family functions summarise_geometry_*() summarize_geometry_*() helpers create summarised geometries. Supported summary types : . union dissolve changing geometries, b. centroid c. bbox custom function summarise geometries can passed onto coercion functions as_post_*(), given parameters x, group_id sf_column_name included function. Additional arguments can passed function necessary.","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"","code":"summarise_geometry_union(polygons) #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.0029756 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.4971355 0.8717961, 0.5474949 0.8088... #> POLYGON ((-0.1774445 0.5995572, -0.1843257 0.58... #> POLYGON ((0.28657 0.6085207, 0.2663408 0.622264... #> POLYGON ((0.5737123 0.4613799, 0.6063966 0.4263... #> POLYGON ((0.2973931 0.2557416, 0.2813385 0.2544... summarise_geometry_centroid(polygons) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.002543201 ymin: 0.17772 xmax: 0.752585 ymax: 0.9018588 #> Geodetic CRS:  WGS 84 #> POINT (0.647816 0.9018588) #> POINT (-0.002543201 0.8403816) #> POINT (0.3897167 0.5412363) #> POINT (0.752585 0.3538271) #> POINT (0.4690683 0.17772) summarise_geometry_bbox(polygons) #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.0029756 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.4361026 0.7456421, 0.9005707 0.7456... #> POLYGON ((-0.2974337 0.5814869, 0.3796448 0.581... #> POLYGON ((0.2145846 0.4039274, 0.5898739 0.4039... #> POLYGON ((0.5272362 0.1748722, 0.9730806 0.1748... #> POLYGON ((0.2452129 -0.0029756, 0.6988282 -0.00..."},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for post_array objects ‚Äî utils-post-array","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"Utility functions post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"","code":"get_group_ids(x)"},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"x post_array object","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"data.frame group_id values","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"get_group_ids() gets group_id values post_array object named data.frame","code":""},{"path":"https://loreabad6.github.io/post/news/index.html","id":"post-development-version","dir":"Changelog","previous_headings":"","what":"post (development version)","title":"post (development version)","text":"Initial CRAN submission.","code":""}]
