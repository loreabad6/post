[{"path":"https://loreabad6.github.io/post/CONTRIBUTING.html","id":"structured-commit-messages","dir":"","previous_headings":"","what":"Structured commit messages","title":"NA","text":"commiting changes git commit try use structured commit messages, adapted https://www.conventionalcommits.org/. first line commit message following format: summary short (preferably < 50 characters), starting upper case, written present tense. commit references specific issue, include Refs #<issue number> summary. issue bug report, may also use Fix #<issue number> issue gets closed automatically. type one defined types listed . feel artistic, can end commit message emoji belonging type üòé. feat: Implementation new feature. :gift: üéÅ fix: bug fix. :wrench: üîß style: Changes code formatting. change program logic. :art: üé® refactor: Changes existing functionality change behaviour. :construction: üöß breaking: Changes existing functionality backwards compatible. :warning: ‚ö†Ô∏è docs: Adding, removing updating user documentation. :books: üìö logs: Adding, removing updating log messages. :sound: üîâ test: Adding, removing updating tests. changes user code. :test_tube: üß™ cicd: Adding, removing updating CI/CD workflows. changes user code. :robot: ü§ñ deps: Adding, removing updating dependencies. :couple: üë´ release: Preparing release, e.g.¬†updating version numbers. :bookmark: üîñ repo: Changes repository involve code/documentation, e.g.¬†adding templates community files. :package: üì¶ Example commit messages :","code":"<type>: <summary> git commit -m 'feat: Add bar parameter to foo(). Refs #10 :gift:' git commit -m 'fix: Include type checking in foo(). Fix #12 :wrench:'"},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"‚ÄúLicense‚Äù shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. ‚ÄúLicensor‚Äù shall mean copyright owner entity authorized copyright owner granting License. ‚ÄúLegal Entity‚Äù shall mean union acting entity entities control, controlled , common control entity. purposes definition, ‚Äúcontrol‚Äù means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. ‚Äú‚Äù (‚Äú‚Äù) shall mean individual Legal Entity exercising permissions granted License. ‚ÄúSource‚Äù form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. ‚ÄúObject‚Äù form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. ‚ÄúWork‚Äù shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). ‚ÄúDerivative Works‚Äù shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. ‚ÄúContribution‚Äù shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, ‚Äúsubmitted‚Äù means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner ‚ÄúContribution.‚Äù ‚ÄúContributor‚Äù shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes ‚ÄúNOTICE‚Äù text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) ‚Äú‚Äù BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://loreabad6.github.io/post/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don‚Äôt include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included ‚Äúprinted page‚Äù copyright notice easier identification within third-party archives.","code":"Copyright 2024 post authors  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"vector-data-cubes","dir":"Articles","previous_headings":"","what":"Vector data cubes","title":"Vector data cube structures","text":"Data cubes multi-dimensional data structures. commonly known data cubes, particularly Earth observation (EO), raster data cubes. Raster data cubes structures frequently used organise time series satellite imagery, gridded climate data, etc. minimum two spatial dimensions: longitude x latitude y. remainder dimensions can either time, dimension bands EO data.   hand, vector data cubes support one minimum spatial dimension, geometry. Representing data vector data cubes becomes useful thematic variables changing time vector locations, .e.¬†spatio-temporal data. example, time series temperature, precipitation, wind speed, etc. recorded climate stations can represented analysed using vector data cubes. However, current implementations vector data cubes support static geometries (e.g.¬†climate stations stay place time). post intends provide support also geometries change time.","code":""},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post-classes","dir":"Articles","previous_headings":"","what":"Post classes","title":"Vector data cube structures","text":"R, vector data cube structures supported form array objects stars package tabular objects1 cubble package. sf used cubble stars handle spatial dimensions. Finally, stars cubble support certain tidyverse functions. post combines advantages packages support vector data cubes structure analyse polygon geometry time series. , two classes provided: post_array post_table.  Changing geometries  post_array class  post_table class post_array inherits stars class therefore supports stars methods, including print method. post_table inherits cubble class subclasses spatial_cubble_df temporal_cubble_df. Likewise, supports cubble methods retains cubble print methods.","code":"library(post) library(cubble) library(stars) library(sf) library(tidyverse) methods(class = \"post_array\") #>  [1] [             as_post_array as_post_table autoplot      filter        #>  [6] mutate        plot          rename        select        slice         #> [11] st_as_sf      st_mask       transmute     #> see '?methods' for accessing help and source code methods(class = \"post_table\") #>  [1] arrange            as_post_array      as_post_table      autoplot           #>  [5] dplyr_reconstruct  face_spatial       face_temporal      filter             #>  [9] mutate             plot               rename             select             #> [13] slice              spatial            st_as_sf           st_crs<-           #> [17] st_normalize       st_shift_longitude st_transform       st_wrap_dateline   #> [21] st_zm              unfold             #> see '?methods' for accessing help and source code"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"creation-and-structure","dir":"Articles","previous_headings":"","what":"Creation and structure","title":"Vector data cube structures","text":"showcase data structure post objects dummy dataset provided package (?polygons). data 5 objects unique group identifier changes shape different timestamps.  create post object group identifier (group_id) always required2. identifier unique per feature within group exist duplicated timestamps. Minimally, sf object converted post object following columns: group identifier timestamp changing geometries converting sf object post object, necessary arguments automatically identified supplied. post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group. learn data structure post_array objects see vignette(\"stars4\", package = \"stars\"). array ‚Äúcell‚Äù value. case particular summary geometry - temporal dimension combination exist, changing geometry stored empty geometry. behavior guarantees dimensionality post_array object. extract summary changing geometries post_array objects use: array format include group identifiers data structure directly, since represented summary geometry. However, identifiers stored metadata can obtained : post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube. learn data structure post_table objects see vignette(\"cb1class\", package = \"cubble\"). Contrary post_array objects, post_table can handle gaps data, .e., every summary geometry - temporal combination present. extract summary changing geometries post_table objects use: functions as_post_*() can used convert objects post_table post_array viceversa. particularly useful certain methods operations available one class. conversion post_array post_table argument drop_empty available case post_array object empty geometries. Dropping empty geometries default.","code":"polygons #> Simple feature collection with 25 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    gid   datetime                       geometry #> 1    a 2020-10-01 POLYGON ((0.5474949 0.80889... #> 2    b 2020-10-01 POLYGON ((0.2791708 0.83373... #> 3    c 2020-10-01 POLYGON ((0.2807462 0.62779... #> 4    d 2020-10-01 POLYGON ((0.7650701 0.47444... #> 5    e 2020-10-01 POLYGON ((0.3825692 0.35378... #> 6    a 2020-10-02 POLYGON ((0.4961102 0.87283... #> 7    b 2020-10-02 POLYGON ((0.3298312 0.76120... #> 8    c 2020-10-02 POLYGON ((0.328914 0.568743... #> 9    d 2020-10-02 POLYGON ((0.7217233 0.52617... #> 10   e 2020-10-02 POLYGON ((0.3101455 0.31689... plot(polygons) (arr = as_post_array(polygons)) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL class(arr) #> [1] \"post_array\" \"stars\" # changing geometry arr$geometry #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... # summary geometry st_geometry(arr) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> POINT (0.6526028 0.901785) #> POINT (-0.009536052 0.8549277) #> POINT (0.3932031 0.5571231) #> POINT (0.7627982 0.3647986) #> POINT (0.4718622 0.1952443) get_group_ids(arr) #>   gid #> 1   a #> 2   b #> 3   c #> 4   d #> 5   e (tab = as_post_table(polygons)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> class(tab) #> [1] \"post_table\"        \"spatial_cubble_df\" \"cubble_df\"         #> [4] \"sf\"                \"tbl_df\"            \"tbl\"               #> [7] \"data.frame\" (tab_temp = face_temporal(tab)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows class(tab_temp) #> [1] \"post_table\"         \"temporal_cubble_df\" \"cubble_df\"          #> [4] \"sf\"                 \"tbl_df\"             \"tbl\"                #> [7] \"data.frame\" # changing geometry st_geometry(tab) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> POINT (0.6526028 0.901785) #> POINT (-0.009536052 0.8549277) #> POINT (0.3932031 0.5571231) #> POINT (0.7627982 0.3647986) #> POINT (0.4718622 0.1952443) # summary geometry st_geometry(tab_temp) #> Geometry set for 25 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.4961102 0.8728385, 0.4361026 0.9477... #> POLYGON ((0.5578801 0.8616378, 0.5623908 1.0854... #> POLYGON ((0.5652241 0.872057, 0.5685463 1.03689... #> POLYGON ((0.6063791 0.8304178, 0.5463715 0.9053... tab |> as_post_array() #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL arr |> as_post_table() #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> set.seed(732) (arr_empty = polygons[sample(nrow(polygons), 13), ] |>    as_post_array()) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                               values #> geom_sum POINT (0.6454728 0.8842442),...,POINT (0.4759192 0.1771352) #> datetime                                                        NULL arr_empty$geometry #> Geometry set for 25 features  (with 12 geometries empty) [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2847997 ymin: -0.00297557 xmax: 0.8416864 ymax: 1.122298 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON EMPTY #> POLYGON EMPTY #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669...  # converting to post_table as_post_table(arr_empty) |>    face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  3 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  4 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  5 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  6 c     2020-10-02 ((0.328914 0.5687438, 0.3806701 0.6624509, 0.5646669 0.5374‚Ä¶ #>  7 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  8 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #>  9 c     2020-10-05 ((0.2145846 0.5285578, 0.2663408 0.6222649, 0.4503375 0.497‚Ä¶ #> 10 d     2020-10-02 ((0.7217233 0.5261787, 0.8353717 0.4270488, 0.7832953 0.340‚Ä¶ #> 11 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 12 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 13 e     2020-10-05 ((0.4750757 0.2620892, 0.6444856 0.2752973, 0.6988282 0.004‚Ä¶ as_post_table(arr_empty, drop_empty = FALSE) |>    face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02                                                        EMPTY #>  3 a     2020-10-03                                                        EMPTY #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05                                                        EMPTY #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04                                                        EMPTY #> 10 b     2020-10-05                                                        EMPTY #> # ‚Ñπ 15 more rows"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post_array-objects","dir":"Articles","previous_headings":"","what":"post_array objects","title":"Vector data cube structures","text":"post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group. learn data structure post_array objects see vignette(\"stars4\", package = \"stars\"). array ‚Äúcell‚Äù value. case particular summary geometry - temporal dimension combination exist, changing geometry stored empty geometry. behavior guarantees dimensionality post_array object. extract summary changing geometries post_array objects use: array format include group identifiers data structure directly, since represented summary geometry. However, identifiers stored metadata can obtained :","code":"(arr = as_post_array(polygons)) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL class(arr) #> [1] \"post_array\" \"stars\" # changing geometry arr$geometry #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... # summary geometry st_geometry(arr) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> POINT (0.6526028 0.901785) #> POINT (-0.009536052 0.8549277) #> POINT (0.3932031 0.5571231) #> POINT (0.7627982 0.3647986) #> POINT (0.4718622 0.1952443) get_group_ids(arr) #>   gid #> 1   a #> 2   b #> 3   c #> 4   d #> 5   e"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"post_table-objects","dir":"Articles","previous_headings":"","what":"post_table objects","title":"Vector data cube structures","text":"post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube. learn data structure post_table objects see vignette(\"cb1class\", package = \"cubble\"). Contrary post_array objects, post_table can handle gaps data, .e., every summary geometry - temporal combination present. extract summary changing geometries post_table objects use:","code":"(tab = as_post_table(polygons)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> class(tab) #> [1] \"post_table\"        \"spatial_cubble_df\" \"cubble_df\"         #> [4] \"sf\"                \"tbl_df\"            \"tbl\"               #> [7] \"data.frame\" (tab_temp = face_temporal(tab)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows class(tab_temp) #> [1] \"post_table\"         \"temporal_cubble_df\" \"cubble_df\"          #> [4] \"sf\"                 \"tbl_df\"             \"tbl\"                #> [7] \"data.frame\" # changing geometry st_geometry(tab) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> POINT (0.6526028 0.901785) #> POINT (-0.009536052 0.8549277) #> POINT (0.3932031 0.5571231) #> POINT (0.7627982 0.3647986) #> POINT (0.4718622 0.1952443) # summary geometry st_geometry(tab_temp) #> Geometry set for 25 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.4961102 0.8728385, 0.4361026 0.9477... #> POLYGON ((0.5578801 0.8616378, 0.5623908 1.0854... #> POLYGON ((0.5652241 0.872057, 0.5685463 1.03689... #> POLYGON ((0.6063791 0.8304178, 0.5463715 0.9053..."},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"conversion-between-post_-objects","dir":"Articles","previous_headings":"","what":"Conversion between post_* objects","title":"Vector data cube structures","text":"functions as_post_*() can used convert objects post_table post_array viceversa. particularly useful certain methods operations available one class. conversion post_array post_table argument drop_empty available case post_array object empty geometries. Dropping empty geometries default.","code":"tab |> as_post_array() #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL arr |> as_post_table() #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> set.seed(732) (arr_empty = polygons[sample(nrow(polygons), 13), ] |>    as_post_array()) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                               values #> geom_sum POINT (0.6454728 0.8842442),...,POINT (0.4759192 0.1771352) #> datetime                                                        NULL arr_empty$geometry #> Geometry set for 25 features  (with 12 geometries empty) [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2847997 ymin: -0.00297557 xmax: 0.8416864 ymax: 1.122298 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON EMPTY #> POLYGON EMPTY #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669...  # converting to post_table as_post_table(arr_empty) |>    face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  3 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  4 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  5 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  6 c     2020-10-02 ((0.328914 0.5687438, 0.3806701 0.6624509, 0.5646669 0.5374‚Ä¶ #>  7 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  8 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #>  9 c     2020-10-05 ((0.2145846 0.5285578, 0.2663408 0.6222649, 0.4503375 0.497‚Ä¶ #> 10 d     2020-10-02 ((0.7217233 0.5261787, 0.8353717 0.4270488, 0.7832953 0.340‚Ä¶ #> 11 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 12 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 13 e     2020-10-05 ((0.4750757 0.2620892, 0.6444856 0.2752973, 0.6988282 0.004‚Ä¶ as_post_table(arr_empty, drop_empty = FALSE) |>    face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02                                                        EMPTY #>  3 a     2020-10-03                                                        EMPTY #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05                                                        EMPTY #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04                                                        EMPTY #> 10 b     2020-10-05                                                        EMPTY #> # ‚Ñπ 15 more rows"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"visualisation","dir":"Articles","previous_headings":"","what":"Visualisation","title":"Vector data cube structures","text":"quick visualisation post objects, can use ggplot2::autoplot(). plot show individual facets according first non-spatial dimension post_array objects according time column post_table objects. can choose visualising attributes based summary changing geometries.     don‚Äôt ggplot2 installed, post_array objects, default plot.stars method supported well post_array object non-spatial attributes. geometry plotted summary geometry.  post_table objects, plot method (defaults plot.sf()) applied spatial face shows summary geometry attributes, temporal face shows changing geometries attributes.   attributes spatial face like see temporal face plot, can unfold .  want achieve complex visualisations, just use another package choice, can extract data sf object post_array post_table objects achieve . Internally, post well. Note object two geometry list-columns. one active, defaulting changing geometries. example want add summary geometry background identify easily geometries changed time, comparison union. can create new object summary geometry active. can use customised plotting , example, ggplot2 create nice maps data.","code":"library(ggplot2) autoplot(tab, gid) autoplot(tab, gid, geom_sum = TRUE) arr$area = st_area(arr$geometry) autoplot(arr, area) autoplot(arr, area, geom_sum = TRUE) plot(arr) plot(tab) plot(face_temporal(tab)) tab |>    face_temporal() |>    unfold(\"lat\", \"long\") |>    plot() arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) arr$area = st_area(arr$geometry) arr$logical = sample(c(rep(TRUE, 20), rep(FALSE, 20)), 25, replace = F) (arr_sf = st_as_sf(arr)) #> Simple feature collection with 25 features and 4 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 6 #>    gid          area logical                                 geom_sum datetime   #>    <chr>       <dbl> <lgl>                              <POLYGON [¬∞]> <date>     #>  1 a      693272313. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-01 #>  2 a      693260956. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-02 #>  3 a      405985931. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-03 #>  4 a      220231724. FALSE   ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-04 #>  5 a      693268587. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-05 #>  6 b     1537008395. TRUE    ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-01 #>  7 b     1537040160. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-02 #>  8 b     1319132956. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-03 #>  9 b      965402936. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-04 #> 10 b     1536993945. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-05 #> # ‚Ñπ 15 more rows #> # ‚Ñπ 1 more variable: geometry <POLYGON [¬∞]> attr(arr_sf, \"sf_column\") #> [1] \"geometry\" arr_sum = st_set_geometry(arr_sf, \"geom_sum\") ggplot(arr_sf) +   geom_sf(data = arr_sum, fill = \"grey80\", color = NA) +   geom_sf(aes(fill = area, color = logical), linewidth = 0.3) +   scale_fill_viridis_c() +   scale_color_manual(values = c(\"black\", \"red\")) +   facet_grid(rows = vars(gid), cols = vars(datetime)) +   theme_bw()"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"autoplot","dir":"Articles","previous_headings":"","what":"Autoplot","title":"Vector data cube structures","text":"quick visualisation post objects, can use ggplot2::autoplot(). plot show individual facets according first non-spatial dimension post_array objects according time column post_table objects. can choose visualising attributes based summary changing geometries.","code":"library(ggplot2) autoplot(tab, gid) autoplot(tab, gid, geom_sum = TRUE) arr$area = st_area(arr$geometry) autoplot(arr, area) autoplot(arr, area, geom_sum = TRUE)"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"base-r-plot","dir":"Articles","previous_headings":"","what":"Base R plot","title":"Vector data cube structures","text":"don‚Äôt ggplot2 installed, post_array objects, default plot.stars method supported well post_array object non-spatial attributes. geometry plotted summary geometry.  post_table objects, plot method (defaults plot.sf()) applied spatial face shows summary geometry attributes, temporal face shows changing geometries attributes.   attributes spatial face like see temporal face plot, can unfold .","code":"plot(arr) plot(tab) plot(face_temporal(tab)) tab |>    face_temporal() |>    unfold(\"lat\", \"long\") |>    plot()"},{"path":"https://loreabad6.github.io/post/articles/post01_post.html","id":"customised-plotting","dir":"Articles","previous_headings":"","what":"Customised plotting","title":"Vector data cube structures","text":"want achieve complex visualisations, just use another package choice, can extract data sf object post_array post_table objects achieve . Internally, post well. Note object two geometry list-columns. one active, defaulting changing geometries. example want add summary geometry background identify easily geometries changed time, comparison union. can create new object summary geometry active. can use customised plotting , example, ggplot2 create nice maps data.","code":"arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) arr$area = st_area(arr$geometry) arr$logical = sample(c(rep(TRUE, 20), rep(FALSE, 20)), 25, replace = F) (arr_sf = st_as_sf(arr)) #> Simple feature collection with 25 features and 4 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 6 #>    gid          area logical                                 geom_sum datetime   #>    <chr>       <dbl> <lgl>                              <POLYGON [¬∞]> <date>     #>  1 a      693272313. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-01 #>  2 a      693260956. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-02 #>  3 a      405985931. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-03 #>  4 a      220231724. FALSE   ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-04 #>  5 a      693268587. TRUE    ((0.4971355 0.8717961, 0.5474949 0.8088‚Ä¶ 2020-10-05 #>  6 b     1537008395. TRUE    ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-01 #>  7 b     1537040160. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-02 #>  8 b     1319132956. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-03 #>  9 b      965402936. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-04 #> 10 b     1536993945. FALSE   ((-0.1774445 0.5995572, -0.1843257 0.58‚Ä¶ 2020-10-05 #> # ‚Ñπ 15 more rows #> # ‚Ñπ 1 more variable: geometry <POLYGON [¬∞]> attr(arr_sf, \"sf_column\") #> [1] \"geometry\" arr_sum = st_set_geometry(arr_sf, \"geom_sum\") ggplot(arr_sf) +   geom_sf(data = arr_sum, fill = \"grey80\", color = NA) +   geom_sf(aes(fill = area, color = logical), linewidth = 0.3) +   scale_fill_viridis_c() +   scale_color_manual(values = c(\"black\", \"red\")) +   facet_grid(rows = vars(gid), cols = vars(datetime)) +   theme_bw()"},{"path":"https://loreabad6.github.io/post/articles/post02_geomsum.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper functions","title":"Summarising geometries","text":"facilitate post_* object creation family functions ?summarise_geometry provided. functions take sf object (x) group identifier (group_id) changing geometries (sf_column_name). Currently, geometries can summarised three ways: union dissolve changing geometries, centroid bounding box minimum rotated rectangle convex hull  Original sf object  Union changing geometries  Centroid changing geometries  Bounding box changing geometries  Minimum rotated rectangle changing geometries  Convex hull changing geometries functions, summarised geometry can created passed as_post_*() creation functions. function can also passed directly, summarise_geometry_centroid() default function.","code":"par(mar = c(0,0,0,0)) pal = sf.colors(n = 5, categorical = TRUE) plot(polygons[\"gid\"], key.pos = NULL, main = NULL, reset = FALSE) plot(summarise_geometry_union(polygons), col = pal) plot(summarise_geometry_centroid(polygons), pch = 19, col = pal, cex = 3) plot(summarise_geometry_bbox(polygons), col = pal) plot(summarise_geometry_bbox(polygons, rotated = TRUE), col = pal) #> Warning in st_minimum_rotated_rectangle.sfc(x_unioned): #> st_minimum_rotated_rectangle does not work correctly for longitude/latitude #> data plot(summarise_geometry_convex_hull(polygons), col = pal) geoms = summarise_geometry_convex_hull(polygons) as_post_table(polygons, geometry_summary = geoms) #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.3, 0, 0.97, 1.15], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                                            geom_sum ts    #> * <chr>    <dbl> <dbl>                                       <POLYGON [¬∞]> <lis> #> 1 a      0.648   0.903 ((0.7568336 0.7456421, 0.8157179 0.7671687, 0.9005‚Ä¶ <sf>  #> 2 b     -0.00678 0.838 ((-0.2341393 0.5814869, -0.1843257 0.5881332, 0.37‚Ä¶ <sf>  #> 3 c      0.394   0.538 ((0.4606164 0.4039274, 0.5749458 0.4441134, 0.5898‚Ä¶ <sf>  #> 4 d      0.751   0.345 ((0.8757658 0.1748722, 0.8918794 0.1923982, 0.9210‚Ä¶ <sf>  #> 5 e      0.476   0.174 ((0.505091 -0.00297557, 0.6988282 0.004623805, 0.6‚Ä¶ <sf> as_post_array(polygons) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL as_post_array(polygons, geometry_summary = summarise_geometry_union) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL"},{"path":"https://loreabad6.github.io/post/articles/post02_geomsum.html","id":"custom-summary-geometry-functions","dir":"Articles","previous_headings":"","what":"Custom summary geometry functions","title":"Summarising geometries","text":"custom function summarise geometries can also created‚Å†, given parameters x, group_id sf_column_name included function. Additional arguments can passed function necessary. example custom summary geometry using sf::st_minimum_rotated_rectangle(). apply function unioned geometries, centroid bounding box functions internally.  Original sf object  Custome summary geometry: point surface changing geometries can pass onto creation functions :","code":"summarise_geometry_custom = function(x, group_id = NULL,                                      sf_column_name = NULL) {    x_unioned = summarise_geometry_union(x,                                        group_id = group_id,                                        sf_column_name = sf_column_name)   st_point_on_surface(x_unioned) }  custom_geoms = summarise_geometry_custom(polygons, group_id = \"gid\",                                          sf_column_name = \"geometry\") #> Warning in st_point_on_surface.sfc(x_unioned): st_point_on_surface may not give #> correct results for longitude/latitude data par(mar = c(0,0,0,0)) plot(polygons[\"gid\"], key.pos = NULL, main = NULL, reset = FALSE) plot(custom_geoms, col = pal, pch = 19, cex = 3) as_post_table(polygons, geometry_summary = custom_geoms) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [0.02, 0.17, 0.75, 0.91], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid     long   lat              geom_sum ts           #> * <chr>  <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 a     0.650  0.910 (0.6498114 0.9103167) <sf [5 √ó 2]> #> 2 b     0.0200 0.876 (0.0199939 0.8755516) <sf [5 √ó 2]> #> 3 c     0.387  0.562 (0.3865421 0.5617063) <sf [5 √ó 2]> #> 4 d     0.746  0.354 (0.7461644 0.3540933) <sf [5 √ó 2]> #> 5 e     0.465  0.168 (0.4646649 0.1678673) <sf [5 √ó 2]>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"cubble-compatibility","dir":"Articles","previous_headings":"","what":"cubble compatibility","title":"Compatibility with other packages","text":"Objects class post_table compatible cubbles methods presented . main functionalities cubble ability analyses spatial temporal faces vector data cube. , functions cubble::face_spatial() cubble::face_temporal() provided. spatial face default state cubble object. Extracting cubble attributes also possible. cubble follows attributes tsibble objects, key equivalent group identifier index equivalent temporal column post_table objects. cubble also supports compatibility tsibble functions, namely gap filling, tsibble::fill_gaps(). sample original polygon create random gaps, can use function fill NA values empty geometries. function tsibble::scan_gaps() hand return post_table object since geometries EMPTY inherit structure post object lost. visualisation, cubble provides cubble::geom_glyph() function used ggplot2 plots. geom useful quick glance temporal variation specific variables also aware spatial distribution features. use one post_table objects unfold long lat functions temporal face vector data cube. , pass onto ggplot function, post_table class dropped avoid conflicts. utility function remove_post_table() provided purpose.","code":"tab = as_post_table(polygons) face_spatial(tab) #> ‚Ñπ The cubble is already in the nested form #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> face_temporal(tab) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows cubble::coords(tab) #> [1] \"long\" \"lat\" cubble::index(tab) #> datetime tsibble::key(tab) #> [[1]] #> gid cubble::spatial(tab) #> Simple feature collection with 5 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> # A tibble: 5 √ó 4 #>   gid       long   lat                 geom_sum #>   <chr>    <dbl> <dbl>              <POINT [¬∞]> #> 1 a      0.653   0.902     (0.6526028 0.901785) #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) #> 3 c      0.393   0.557    (0.3932031 0.5571231) #> 4 d      0.763   0.365    (0.7627982 0.3647986) #> 5 e      0.472   0.195    (0.4718622 0.1952443) set.seed(324) tab_gaps = polygons[sample(nrow(polygons), 13), ] |>    as_post_table()  tab_gaps |> face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  3 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  4 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  5 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  6 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #>  7 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.2890‚Ä¶ #>  8 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.233‚Ä¶ #>  9 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.230‚Ä¶ #> 10 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 11 e     2020-10-02 ((0.3101455 0.3168974, 0.4795555 0.3301055, 0.5338981 0.059‚Ä¶ #> 12 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 13 e     2020-10-04 ((0.3130673 0.2176433, 0.4498424 0.228307, 0.4939709 0.0085‚Ä¶ tab_gaps |> face_temporal() |> fill_gaps() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02                                                        EMPTY #>  3 a     2020-10-03                                                        EMPTY #>  4 a     2020-10-04                                                        EMPTY #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  9 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #> 10 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.2890‚Ä¶ #> 11 d     2020-10-02                                                        EMPTY #> 12 d     2020-10-03                                                        EMPTY #> 13 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.233‚Ä¶ #> 14 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.230‚Ä¶ #> 15 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 16 e     2020-10-02 ((0.3101455 0.3168974, 0.4795555 0.3301055, 0.5338981 0.059‚Ä¶ #> 17 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 18 e     2020-10-04 ((0.3130673 0.2176433, 0.4498424 0.228307, 0.4939709 0.0085‚Ä¶ tab_gaps |> face_temporal() |> scan_gaps() #> # cubble:   key: gid [5], index: datetime, long form, [tsibble] #> # temporal: 2020-10-02 -- 2020-10-04 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>   gid   datetime   #>   <chr> <date>     #> 1 a     2020-10-02 #> 2 a     2020-10-03 #> 3 a     2020-10-04 #> 4 d     2020-10-02 #> 5 d     2020-10-03 tab_union = as_post_table(polygons, geometry_summary = summarise_geometry_union) #> Warning: st_centroid assumes attributes are constant over geometries tab_unf = polygons |>    mutate(area = as.numeric(st_area(geometry))) |>    as_post_table() |>    face_temporal() |>    unfold(long, lat)  ggplot(remove_post_table(tab_unf)) +   aes(x_major = long, y_major = lat, x_minor = datetime, y_minor = area) +   geom_sf(data = tab_union, fill = \"grey80\", color = NA, inherit.aes = FALSE) +   geom_glyph_box(width = 0.18, height = 0.1) +   geom_glyph(aes(color = area), width = 0.18, height = 0.1, linewidth = 0.7) +   scale_color_viridis_c() +   theme_bw()"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"spatial-and-temporal-faces","dir":"Articles","previous_headings":"","what":"Spatial and temporal faces","title":"Compatibility with other packages","text":"main functionalities cubble ability analyses spatial temporal faces vector data cube. , functions cubble::face_spatial() cubble::face_temporal() provided. spatial face default state cubble object.","code":"tab = as_post_table(polygons) face_spatial(tab) #> ‚Ñπ The cubble is already in the nested form #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]> face_temporal(tab) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209 1.0966‚Ä¶ #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717 0.8981‚Ä¶ #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 0.89897‚Ä¶ #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.09777458 1.05‚Ä¶ #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.1231118 1.026‚Ä¶ #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951521 0.6‚Ä¶ #> # ‚Ñπ 15 more rows"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"attribute-extraction","dir":"Articles","previous_headings":"","what":"Attribute extraction","title":"Compatibility with other packages","text":"Extracting cubble attributes also possible. cubble follows attributes tsibble objects, key equivalent group identifier index equivalent temporal column post_table objects.","code":"cubble::coords(tab) #> [1] \"long\" \"lat\" cubble::index(tab) #> datetime tsibble::key(tab) #> [[1]] #> gid cubble::spatial(tab) #> Simple feature collection with 5 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> # A tibble: 5 √ó 4 #>   gid       long   lat                 geom_sum #>   <chr>    <dbl> <dbl>              <POINT [¬∞]> #> 1 a      0.653   0.902     (0.6526028 0.901785) #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) #> 3 c      0.393   0.557    (0.3932031 0.5571231) #> 4 d      0.763   0.365    (0.7627982 0.3647986) #> 5 e      0.472   0.195    (0.4718622 0.1952443)"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"gap-filling-with-tsibble","dir":"Articles","previous_headings":"","what":"Gap filling with tsibble","title":"Compatibility with other packages","text":"cubble also supports compatibility tsibble functions, namely gap filling, tsibble::fill_gaps(). sample original polygon create random gaps, can use function fill NA values empty geometries. function tsibble::scan_gaps() hand return post_table object since geometries EMPTY inherit structure post object lost.","code":"set.seed(324) tab_gaps = polygons[sample(nrow(polygons), 13), ] |>    as_post_table()  tab_gaps |> face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  3 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  4 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  5 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  6 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #>  7 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.2890‚Ä¶ #>  8 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.233‚Ä¶ #>  9 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.230‚Ä¶ #> 10 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 11 e     2020-10-02 ((0.3101455 0.3168974, 0.4795555 0.3301055, 0.5338981 0.059‚Ä¶ #> 12 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 13 e     2020-10-04 ((0.3130673 0.2176433, 0.4498424 0.228307, 0.4939709 0.0085‚Ä¶ tab_gaps |> face_temporal() |> fill_gaps() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [¬∞]> #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.5520055 1.032‚Ä¶ #>  2 a     2020-10-02                                                        EMPTY #>  3 a     2020-10-03                                                        EMPTY #>  4 a     2020-10-04                                                        EMPTY #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.6108898 1.054‚Ä¶ #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825181 0.6‚Ä¶ #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318577 0.5‚Ä¶ #>  8 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.4922‚Ä¶ #>  9 c     2020-10-04 ((0.2930046 0.6546896, 0.3210764 0.7055149, 0.4264484 0.587‚Ä¶ #> 10 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.2890‚Ä¶ #> 11 d     2020-10-02                                                        EMPTY #> 12 d     2020-10-03                                                        EMPTY #> 13 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.233‚Ä¶ #> 14 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.230‚Ä¶ #> 15 e     2020-10-01 ((0.3825692 0.3537803, 0.5519791 0.3669884, 0.6063218 0.096‚Ä¶ #> 16 e     2020-10-02 ((0.3101455 0.3168974, 0.4795555 0.3301055, 0.5338981 0.059‚Ä¶ #> 17 e     2020-10-03 ((0.2813385 0.2544898, 0.4507484 0.2676979, 0.505091 -0.002‚Ä¶ #> 18 e     2020-10-04 ((0.3130673 0.2176433, 0.4498424 0.228307, 0.4939709 0.0085‚Ä¶ tab_gaps |> face_temporal() |> scan_gaps() #> # cubble:   key: gid [5], index: datetime, long form, [tsibble] #> # temporal: 2020-10-02 -- 2020-10-04 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POINT [¬∞]] #>   gid   datetime   #>   <chr> <date>     #> 1 a     2020-10-02 #> 2 a     2020-10-03 #> 3 a     2020-10-04 #> 4 d     2020-10-02 #> 5 d     2020-10-03"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"glyph-maps","dir":"Articles","previous_headings":"","what":"Glyph maps","title":"Compatibility with other packages","text":"visualisation, cubble provides cubble::geom_glyph() function used ggplot2 plots. geom useful quick glance temporal variation specific variables also aware spatial distribution features. use one post_table objects unfold long lat functions temporal face vector data cube. , pass onto ggplot function, post_table class dropped avoid conflicts. utility function remove_post_table() provided purpose.","code":"tab_union = as_post_table(polygons, geometry_summary = summarise_geometry_union) #> Warning: st_centroid assumes attributes are constant over geometries tab_unf = polygons |>    mutate(area = as.numeric(st_area(geometry))) |>    as_post_table() |>    face_temporal() |>    unfold(long, lat)  ggplot(remove_post_table(tab_unf)) +   aes(x_major = long, y_major = lat, x_minor = datetime, y_minor = area) +   geom_sf(data = tab_union, fill = \"grey80\", color = NA, inherit.aes = FALSE) +   geom_glyph_box(width = 0.18, height = 0.1) +   geom_glyph(aes(color = area), width = 0.18, height = 0.1, linewidth = 0.7) +   scale_color_viridis_c() +   theme_bw()"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"stars-compatibility","dir":"Articles","previous_headings":"","what":"stars compatibility","title":"Compatibility with other packages","text":"Objects class post_array inherit also stars class, methods stars objects applicable post objects shown . stars hence post_array objects esence arrays, therefore can use [ operator subsetting (see usage corresponding stars vignette). Note number geometries attributes varies according subsetting operation. extracting attributes , [[ can used. Note geometry attribute arr object created sfc object dimensions. can also create new attributes, example: functionality use [ ‚Äúcrop‚Äù operator also supported. However, case spatial filtering rather cropping operation takes place. Note spatial dimension geom_sum one gets filtered changing geometries 1. Therefore, filtered post_array also keeps geometries intersect circles summary geometry .  Needs input","code":"arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) # subset first two features arr[,1:2,] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :10   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  2         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.4971 0.8718, 0...., POLYGON ((-0.1774 0.5996, -... #> datetime                                                           NULL # subset last three timestamps arr[,,3:5] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :15   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    3  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL arr[[1]] #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... class(arr[[1]]) #> [1] \"sfc_POLYGON\" \"sfc\" dim(arr[[1]]) #> [1] 5 5 arr$area = st_area(arr[[1]]) arr #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :25   Min.   :5.366e+07   #>  epsg:4326    : 0   1st Qu.:3.928e+08   #>  +proj=long...: 0   Median :4.060e+08   #>                     Mean   :6.216e+08   #>                     3rd Qu.:6.933e+08   #>                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL circles = list(st_point(c(0.55,0.5)), st_point(c(0.75,0.4))) |>   st_sfc(crs = 4326) |>   st_buffer(10000) arr[circles] #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :10   Min.   : 53657361   #>  epsg:4326    : 0   1st Qu.:266964303   #>  +proj=long...: 0   Median :392817773   #>                     Mean   :321257030   #>                     3rd Qu.:394413594   #>                     Max.   :394950797   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    3  4         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.2866 0.6085, 0...., POLYGON ((0.5737 0.4614, 0.... #> datetime                                                           NULL par(mar = c(0,0,0,0)) plot(arr$geometry, col = \"grey80\", border = \"white\") plot(circles, col = \"deepskyblue3\", border = NA, add = TRUE) plot(arr[circles]$geometry, border = \"firebrick1\", add = TRUE)"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"Compatibility with other packages","text":"stars hence post_array objects esence arrays, therefore can use [ operator subsetting (see usage corresponding stars vignette). Note number geometries attributes varies according subsetting operation. extracting attributes , [[ can used. Note geometry attribute arr object created sfc object dimensions. can also create new attributes, example: functionality use [ ‚Äúcrop‚Äù operator also supported. However, case spatial filtering rather cropping operation takes place. Note spatial dimension geom_sum one gets filtered changing geometries 1. Therefore, filtered post_array also keeps geometries intersect circles summary geometry .","code":"arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) # subset first two features arr[,1:2,] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :10   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  2         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.4971 0.8718, 0...., POLYGON ((-0.1774 0.5996, -... #> datetime                                                           NULL # subset last three timestamps arr[,,3:5] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :15   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    3  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL arr[[1]] #> Geometry set for 25 features  [dim: 5 x 5] #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((0.5474949 0.8088912, 0.4874872 0.8838... #> POLYGON ((0.2791708 0.8337388, -0.2847997 0.654... #> POLYGON ((0.2807462 0.6277986, 0.3325024 0.7215... #> POLYGON ((0.7650701 0.4744459, 0.8787185 0.3753... #> POLYGON ((0.3825692 0.3537803, 0.5519791 0.3669... class(arr[[1]]) #> [1] \"sfc_POLYGON\" \"sfc\" dim(arr[[1]]) #> [1] 5 5 arr$area = st_area(arr[[1]]) arr #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :25   Min.   :5.366e+07   #>  epsg:4326    : 0   1st Qu.:3.928e+08   #>  +proj=long...: 0   Median :4.060e+08   #>                     Mean   :6.216e+08   #>                     3rd Qu.:6.933e+08   #>                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL circles = list(st_point(c(0.55,0.5)), st_point(c(0.75,0.4))) |>   st_sfc(crs = 4326) |>   st_buffer(10000) arr[circles] #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :10   Min.   : 53657361   #>  epsg:4326    : 0   1st Qu.:266964303   #>  +proj=long...: 0   Median :392817773   #>                     Mean   :321257030   #>                     3rd Qu.:394413594   #>                     Max.   :394950797   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    3  4         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.2866 0.6085, 0...., POLYGON ((0.5737 0.4614, 0.... #> datetime                                                           NULL par(mar = c(0,0,0,0)) plot(arr$geometry, col = \"grey80\", border = \"white\") plot(circles, col = \"deepskyblue3\", border = NA, add = TRUE) plot(arr[circles]$geometry, border = \"firebrick1\", add = TRUE)"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"apply-functions-to-array-dimensions","dir":"Articles","previous_headings":"","what":"Apply functions to array dimensions","title":"Compatibility with other packages","text":"Needs input","code":""},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"sf-compatibility","dir":"Articles","previous_headings":"","what":"sf compatibility","title":"Compatibility with other packages","text":"post classes, .e.¬†post_array post_table support sf methods since inherit implicitly explicitly sf sfc class. Methods supported post objects include: Geometric operations pairs simple features (see ?sf::geos_binary_ops) supported post objects since change topology object ways can‚Äôt reconstructed without knowledge summary changing polygons adapted. converting post_* object sf summary changing geometries preserved, changing geometry set active geometry. Converting post_table also includes coordinate columns created cubble. transforming CRS, changing summary geometry updated within post_* object. Geometric binary predicates (?sf::geos_binary_pred) supported post_* objects different ways. post_array objects, can apply geometric binary predicates changing geometries function st_mask(). result one column matrix result features y relating feature x. still want get relation binary predicate works sf, call function changing geometries. mind, can also create new dimension result binary predicate geometric operation, similar mask. Since new attribute cube, dimensions preserved.  post_table objects, predicates can applied either spatial temporal face vector data cube. Applying predicate changing geometry post_array objects renders result applying post_table objects long format temporal face. predicates shown particularly relevant use inside spatial filtering operations. sf::st_filter() work post_array objects. See Section¬†3.3 example mask cube values spatially. work post_table objects, spatial temporal face. spatial filtering needs applied changing geometry post_array object, can first convert post_table, perform filtering temporal face convert back post_array object. Geometric measurements (?sf::geos_measures) can applied summary changing geometries : Unary operations (?sf::geos_unary) can applied post objects different behaviors expected. post_array operation performed changing geometries extracting geometries. operation applied post_table geometry column gets updated new geometry type.  Original summary geometry: minimum rotated rectangle  Updated summary geometry: centroid","code":"# post_array arr = as_post_array(polygons,                     geometry_summary = summarise_geometry_bbox,                      rotated = TRUE) #> Warning in st_minimum_rotated_rectangle.sfc(st_geometry(x)): #> st_minimum_rotated_rectangle does not work correctly for longitude/latitude #> data st_as_sf(arr) #> Simple feature collection with 25 features and 2 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 4 #>    gid                             geom_sum datetime                    geometry #>    <chr>                      <POLYGON [¬∞]> <date>                 <POLYGON [¬∞]> #>  1 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-01 ((0.5474949 0.8088912, 0‚Ä¶ #>  2 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-02 ((0.4961102 0.8728385, 0‚Ä¶ #>  3 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-03 ((0.5578801 0.8616378, 0‚Ä¶ #>  4 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-04 ((0.5652241 0.872057, 0.‚Ä¶ #>  5 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-05 ((0.6063791 0.8304178, 0‚Ä¶ #>  6 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-01 ((0.2791708 0.8337388, -‚Ä¶ #>  7 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-02 ((0.3298312 0.7612067, -‚Ä¶ #>  8 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-03 ((0.3796448 0.767853, -0‚Ä¶ #>  9 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-04 ((0.3642467 0.779727, -0‚Ä¶ #> 10 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-05 ((0.2665368 0.8649996, -‚Ä¶ #> # ‚Ñπ 15 more rows # post_table tab = as_post_table(polygons,                     geometry_summary = summarise_geometry_bbox,                      rotated = TRUE) #> Warning in st_minimum_rotated_rectangle.sfc(st_geometry(x)): #> st_minimum_rotated_rectangle does not work correctly for longitude/latitude #> data #> Warning: st_centroid assumes attributes are constant over geometries st_as_sf(tab) #> Simple feature collection with 25 features and 4 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 6 #>    gid      long   lat                                       geom_sum datetime   #>    <chr>   <dbl> <dbl>                                  <POLYGON [¬∞]> <date>     #>  1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-01 #>  2 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-02 #>  3 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-03 #>  4 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-04 #>  5 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-05 #>  6 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-01 #>  7 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-02 #>  8 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-03 #>  9 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-04 #> 10 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-05 #> # ‚Ñπ 15 more rows #> # ‚Ñπ 1 more variable: geometry <POLYGON [¬∞]> # post_array st_transform(arr, 3035) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:3035    : 0   #>  +proj=laea...: 0   #> dimension(s): #>          from to     offset  delta                       refsys point #> geom_sum    1  5         NA     NA ETRS89-extended / LAEA Eu... FALSE #> datetime    1  5 2020-10-01 1 days                         Date    NA #>                                                                 values #> geom_sum POLYGON ((3155515 -218766...,...,POLYGON ((3172602 -230105... #> datetime                                                          NULL # post_table st_transform(tab, 3035) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [3039847.61, -2301054.31, 3209654.79, -2175848.01], ETRS89-extended #> #   / LAEA Europe #> # temporal: datetime [date], geometry [POLYGON [m]] #>   gid      long   lat                                             geom_sum ts    #> * <chr>   <dbl> <dbl>                                        <POLYGON [m]> <lis> #> 1 a      0.638  0.885 ((3155515 -2187663, 3201614 -2217596, 3183656 -2237‚Ä¶ <sf>  #> 2 b     -0.0180 0.768 ((3091893 -2175848, 3137266 -2220797, 3085228 -2255‚Ä¶ <sf>  #> 3 c      0.402  0.507 ((3131201 -2224770, 3166375 -2248651, 3146055 -2269‚Ä¶ <sf>  #> 4 d      0.744  0.341 ((3171061 -2243942, 3209655 -2274048, 3188598 -2292‚Ä¶ <sf>  #> 5 e      0.467  0.180 ((3172602 -2301054, 3117186 -2296926, 3117310 -2260‚Ä¶ <sf> st_transform(tab, 3035) |> face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [m]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [m]> #>  1 a     2020-10-01 ((3158048 -2218898, 3151083 -2210627, 3159756 -2196590, 319‚Ä¶ #>  2 a     2020-10-02 ((3152082 -2211840, 3145122 -2203563, 3153799 -2189527, 318‚Ä¶ #>  3 a     2020-10-03 ((3159592 -2213763, 3161300 -2191451, 3195825 -2213869, 315‚Ä¶ #>  4 a     2020-10-04 ((3160545 -2212817, 3161802 -2196385, 3187231 -2212904, 316‚Ä¶ #>  5 a     2020-10-05 ((3165375 -2217510, 3158407 -2209244, 3167076 -2195200, 320‚Ä¶ #>  6 b     2020-10-01 ((3125303 -2212881, 3055244 -2223078, 3055592 -2221881, 305‚Ä¶ #>  7 b     2020-10-02 ((3131127 -2220801, 3061050 -2231032, 3061397 -2229835, 306‚Ä¶ #>  8 b     2020-10-03 ((3137266 -2220797, 3067191 -2231067, 3104291 -2188180, 313‚Ä¶ #>  9 b     2020-10-04 ((3135442 -2219407, 3075499 -2228212, 3107229 -2191506, 313‚Ä¶ #> 10 b     2020-10-05 ((3123921 -2209589, 3053870 -2219778, 3054218 -2218581, 305‚Ä¶ #> # ‚Ñπ 15 more rows st_mask(arr, circles, .predicate = st_disjoint) #>        [,1] #>  [1,]  TRUE #>  [2,]  TRUE #>  [3,]  TRUE #>  [4,]  TRUE #>  [5,]  TRUE #>  [6,]  TRUE #>  [7,]  TRUE #>  [8,]  TRUE #>  [9,] FALSE #> [10,]  TRUE #> [11,]  TRUE #> [12,]  TRUE #> [13,]  TRUE #> [14,] FALSE #> [15,]  TRUE #> [16,]  TRUE #> [17,]  TRUE #> [18,]  TRUE #> [19,]  TRUE #> [20,]  TRUE #> [21,]  TRUE #> [22,]  TRUE #> [23,]  TRUE #> [24,]  TRUE #> [25,]  TRUE st_disjoint(arr$geometry, circles) #> Sparse geometry binary predicate list of length 25, where the predicate #> was `disjoint' #> first 10 elements: #>  1: 1, 2 #>  2: 1, 2 #>  3: 2 #>  4: 1 #>  5: 1, 2 #>  6: 1, 2 #>  7: 1, 2 #>  8: 2 #>  9: (empty) #>  10: 1, 2 arr$int_circles = st_mask(arr, circles) arr #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry   int_circles     #>  POLYGON      :25   Mode :logical   #>  epsg:4326    : 0   FALSE:16        #>  +proj=long...: 0   TRUE :9         #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL autoplot(arr, int_circles) +   geom_sf(data = circles, fill = NA, color = \"red\") st_disjoint(tab, circles) #> Sparse geometry binary predicate list of length 5, where the predicate #> was `disjoint' #>  1: 1, 2 #>  2: 1, 2 #>  3: 2 #>  4: (empty) #>  5: 1 st_disjoint(face_temporal(tab), circles) #> Sparse geometry binary predicate list of length 25, where the predicate #> was `disjoint' #> first 10 elements: #>  1: 1, 2 #>  2: 1, 2 #>  3: 1, 2 #>  4: 1, 2 #>  5: 1, 2 #>  6: 1, 2 #>  7: 1, 2 #>  8: 1, 2 #>  9: 1, 2 #>  10: 1, 2 sum(st_disjoint(arr$geometry, circles, sparse = FALSE)) #> [1] 39 sum(st_disjoint(face_temporal(tab), circles, sparse = FALSE)) #> [1] 39 st_filter(arr) #> Error in UseMethod(\"st_filter\"): no applicable method for 'st_filter' applied to an object of class \"c('post_array', 'stars')\" st_filter(arr$geometry) #> Error in UseMethod(\"st_filter\"): no applicable method for 'st_filter' applied to an object of class \"c('sfc_POLYGON', 'sfc')\" st_filter(tab, circles) #> # cubble:   key: gid [3], index: datetime, nested form, [sf] #> # spatial:  [0.18, -0.01, 0.99, 0.72], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat                                               geom_sum ts    #> * <chr> <dbl> <dbl>                                          <POLYGON [¬∞]> <lis> #> 1 c     0.402 0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, 0.4712468‚Ä¶ <sf>  #> 2 d     0.744 0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, 0.8247802‚Ä¶ <sf>  #> 3 e     0.467 0.180 ((0.6988282 0.004623805, 0.2489107 -0.01302429, 0.234‚Ä¶ <sf> st_filter(face_temporal(tab), circles) #> # cubble:   key: gid [2], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>   gid   datetime                                                        geometry #> * <chr> <date>                                                     <POLYGON [¬∞]> #> 1 c     2020-10-01 ((0.2807462 0.6277986, 0.3325024 0.7215057, 0.5164992 0.5964‚Ä¶ #> 2 c     2020-10-02 ((0.328914 0.5687438, 0.3806701 0.6624509, 0.5646669 0.53743‚Ä¶ #> 3 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.49222‚Ä¶ #> 4 c     2020-10-05 ((0.2145846 0.5285578, 0.2663408 0.6222649, 0.4503375 0.4972‚Ä¶ #> 5 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.28905‚Ä¶ #> 6 d     2020-10-02 ((0.7217233 0.5261787, 0.8353717 0.4270488, 0.7832953 0.3407‚Ä¶ #> 7 d     2020-10-03 ((0.6752472 0.4565396, 0.7888956 0.3574097, 0.6915808 0.2158‚Ä¶ #> 8 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.2335‚Ä¶ #> 9 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.2301‚Ä¶ arr |>    as_post_table() |>    face_temporal() |>    st_filter(circles) |>    as_post_array() #> Warning: st_centroid assumes attributes are constant over geometries #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>  int_circles            geometry   #>  Mode:logical   POLYGON      :10   #>  TRUE:9         epsg:4326    : 0   #>  NA's:1         +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  2         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.3321 0.7218, 0...., POLYGON ((0.6634 0.573, 0.9... #> datetime                                                           NULL # post_array st_area(st_geometry(arr)) #> Units: [m^2] #> [1] 1445426306 3909318595 1225404011 1343229189 2047852426 st_area(arr$geometry) #> Units: [m^2] #>  [1]  693272313 1537008395  394944271  392819049  585061160  693260956 #>  [7] 1537040160  394948297  392816498  585062691  405985931 1319132956 #> [13]  182397989  385893114  585064729  220231724  965402936   53657361 #> [19]  227321366  384440186  693268587 1536993945  394950797  392821562 #> [25]  585064518 #post_table st_area(tab) #> Units: [m^2] #> [1] 1445426306 3909318595 1225404011 1343229189 2047852426 st_area(face_temporal(tab)) #> Units: [m^2] #>  [1]  693272313  693260956  405985931  220231724  693268587 1537008395 #>  [7] 1537040160 1319132956  965402936 1536993945  394944271  394948297 #> [13]  182397989   53657361  394950797  392819049  392816498  385893114 #> [19]  227321366  392821562  585061160  585062691  585064729  384440186 #> [25]  585064518 st_boundary(arr$geometry) #> Geometry set for 25 features  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> LINESTRING (0.5474949 0.8088912, 0.4874872 0.88... #> LINESTRING (0.2791708 0.8337388, -0.2847997 0.6... #> LINESTRING (0.2807462 0.6277986, 0.3325024 0.72... #> LINESTRING (0.7650701 0.4744459, 0.8787185 0.37... #> LINESTRING (0.3825692 0.3537803, 0.5519791 0.36... st_centroid(tab) #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.02, 0.18, 0.74, 0.89], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid      long   lat                geom_sum ts           #>   <chr>   <dbl> <dbl>             <POINT [¬∞]> <list>       #> 1 a      0.638  0.885   (0.6382744 0.8853982) <sf [5 √ó 2]> #> 2 b     -0.0180 0.768 (-0.01803554 0.7676183) <sf [5 √ó 2]> #> 3 c      0.402  0.507   (0.4016835 0.5066305) <sf [5 √ó 2]> #> 4 d      0.744  0.341   (0.7440853 0.3409447) <sf [5 √ó 2]> #> 5 e      0.467  0.180   (0.4666607 0.1795801) <sf [5 √ó 2]> plot(tab$geom_sum) plot(st_centroid(tab)$geom_sum) #> Warning: st_centroid assumes attributes are constant over geometries"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"converting-to-sf","dir":"Articles","previous_headings":"","what":"Converting to sf","title":"Compatibility with other packages","text":"converting post_* object sf summary changing geometries preserved, changing geometry set active geometry. Converting post_table also includes coordinate columns created cubble.","code":"# post_array arr = as_post_array(polygons,                     geometry_summary = summarise_geometry_bbox,                      rotated = TRUE) #> Warning in st_minimum_rotated_rectangle.sfc(st_geometry(x)): #> st_minimum_rotated_rectangle does not work correctly for longitude/latitude #> data st_as_sf(arr) #> Simple feature collection with 25 features and 2 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 4 #>    gid                             geom_sum datetime                    geometry #>    <chr>                      <POLYGON [¬∞]> <date>                 <POLYGON [¬∞]> #>  1 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-01 ((0.5474949 0.8088912, 0‚Ä¶ #>  2 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-02 ((0.4961102 0.8728385, 0‚Ä¶ #>  3 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-03 ((0.5578801 0.8616378, 0‚Ä¶ #>  4 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-04 ((0.5652241 0.872057, 0.‚Ä¶ #>  5 a     ((0.5137787 1.117004, 0.9005707 0‚Ä¶ 2020-10-05 ((0.6063791 0.8304178, 0‚Ä¶ #>  6 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-01 ((0.2791708 0.8337388, -‚Ä¶ #>  7 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-02 ((0.3298312 0.7612067, -‚Ä¶ #>  8 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-03 ((0.3796448 0.767853, -0‚Ä¶ #>  9 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-04 ((0.3642467 0.779727, -0‚Ä¶ #> 10 b     ((-0.008469583 1.165177, 0.379644‚Ä¶ 2020-10-05 ((0.2665368 0.8649996, -‚Ä¶ #> # ‚Ñπ 15 more rows # post_table tab = as_post_table(polygons,                     geometry_summary = summarise_geometry_bbox,                      rotated = TRUE) #> Warning in st_minimum_rotated_rectangle.sfc(st_geometry(x)): #> st_minimum_rotated_rectangle does not work correctly for longitude/latitude #> data #> Warning: st_centroid assumes attributes are constant over geometries st_as_sf(tab) #> Simple feature collection with 25 features and 4 fields #> Active geometry column: geometry #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 √ó 6 #>    gid      long   lat                                       geom_sum datetime   #>    <chr>   <dbl> <dbl>                                  <POLYGON [¬∞]> <date>     #>  1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-01 #>  2 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-02 #>  3 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-03 #>  4 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-04 #>  5 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7‚Ä¶ 2020-10-05 #>  6 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-01 #>  7 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-02 #>  8 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-03 #>  9 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-04 #> 10 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, ‚Ä¶ 2020-10-05 #> # ‚Ñπ 15 more rows #> # ‚Ñπ 1 more variable: geometry <POLYGON [¬∞]>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"crs-transformation","dir":"Articles","previous_headings":"","what":"CRS transformation","title":"Compatibility with other packages","text":"transforming CRS, changing summary geometry updated within post_* object.","code":"# post_array st_transform(arr, 3035) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:3035    : 0   #>  +proj=laea...: 0   #> dimension(s): #>          from to     offset  delta                       refsys point #> geom_sum    1  5         NA     NA ETRS89-extended / LAEA Eu... FALSE #> datetime    1  5 2020-10-01 1 days                         Date    NA #>                                                                 values #> geom_sum POLYGON ((3155515 -218766...,...,POLYGON ((3172602 -230105... #> datetime                                                          NULL # post_table st_transform(tab, 3035) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [3039847.61, -2301054.31, 3209654.79, -2175848.01], ETRS89-extended #> #   / LAEA Europe #> # temporal: datetime [date], geometry [POLYGON [m]] #>   gid      long   lat                                             geom_sum ts    #> * <chr>   <dbl> <dbl>                                        <POLYGON [m]> <lis> #> 1 a      0.638  0.885 ((3155515 -2187663, 3201614 -2217596, 3183656 -2237‚Ä¶ <sf>  #> 2 b     -0.0180 0.768 ((3091893 -2175848, 3137266 -2220797, 3085228 -2255‚Ä¶ <sf>  #> 3 c      0.402  0.507 ((3131201 -2224770, 3166375 -2248651, 3146055 -2269‚Ä¶ <sf>  #> 4 d      0.744  0.341 ((3171061 -2243942, 3209655 -2274048, 3188598 -2292‚Ä¶ <sf>  #> 5 e      0.467  0.180 ((3172602 -2301054, 3117186 -2296926, 3117310 -2260‚Ä¶ <sf> st_transform(tab, 3035) |> face_temporal() #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [m]] #>    gid   datetime                                                       geometry #>  * <chr> <date>                                                    <POLYGON [m]> #>  1 a     2020-10-01 ((3158048 -2218898, 3151083 -2210627, 3159756 -2196590, 319‚Ä¶ #>  2 a     2020-10-02 ((3152082 -2211840, 3145122 -2203563, 3153799 -2189527, 318‚Ä¶ #>  3 a     2020-10-03 ((3159592 -2213763, 3161300 -2191451, 3195825 -2213869, 315‚Ä¶ #>  4 a     2020-10-04 ((3160545 -2212817, 3161802 -2196385, 3187231 -2212904, 316‚Ä¶ #>  5 a     2020-10-05 ((3165375 -2217510, 3158407 -2209244, 3167076 -2195200, 320‚Ä¶ #>  6 b     2020-10-01 ((3125303 -2212881, 3055244 -2223078, 3055592 -2221881, 305‚Ä¶ #>  7 b     2020-10-02 ((3131127 -2220801, 3061050 -2231032, 3061397 -2229835, 306‚Ä¶ #>  8 b     2020-10-03 ((3137266 -2220797, 3067191 -2231067, 3104291 -2188180, 313‚Ä¶ #>  9 b     2020-10-04 ((3135442 -2219407, 3075499 -2228212, 3107229 -2191506, 313‚Ä¶ #> 10 b     2020-10-05 ((3123921 -2209589, 3053870 -2219778, 3054218 -2218581, 305‚Ä¶ #> # ‚Ñπ 15 more rows"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"sec-binary","dir":"Articles","previous_headings":"","what":"Geometric binary predicates","title":"Compatibility with other packages","text":"Geometric binary predicates (?sf::geos_binary_pred) supported post_* objects different ways. post_array objects, can apply geometric binary predicates changing geometries function st_mask(). result one column matrix result features y relating feature x. still want get relation binary predicate works sf, call function changing geometries. mind, can also create new dimension result binary predicate geometric operation, similar mask. Since new attribute cube, dimensions preserved.  post_table objects, predicates can applied either spatial temporal face vector data cube. Applying predicate changing geometry post_array objects renders result applying post_table objects long format temporal face.","code":"st_mask(arr, circles, .predicate = st_disjoint) #>        [,1] #>  [1,]  TRUE #>  [2,]  TRUE #>  [3,]  TRUE #>  [4,]  TRUE #>  [5,]  TRUE #>  [6,]  TRUE #>  [7,]  TRUE #>  [8,]  TRUE #>  [9,] FALSE #> [10,]  TRUE #> [11,]  TRUE #> [12,]  TRUE #> [13,]  TRUE #> [14,] FALSE #> [15,]  TRUE #> [16,]  TRUE #> [17,]  TRUE #> [18,]  TRUE #> [19,]  TRUE #> [20,]  TRUE #> [21,]  TRUE #> [22,]  TRUE #> [23,]  TRUE #> [24,]  TRUE #> [25,]  TRUE st_disjoint(arr$geometry, circles) #> Sparse geometry binary predicate list of length 25, where the predicate #> was `disjoint' #> first 10 elements: #>  1: 1, 2 #>  2: 1, 2 #>  3: 2 #>  4: 1 #>  5: 1, 2 #>  6: 1, 2 #>  7: 1, 2 #>  8: 2 #>  9: (empty) #>  10: 1, 2 arr$int_circles = st_mask(arr, circles) arr #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry   int_circles     #>  POLYGON      :25   Mode :logical   #>  epsg:4326    : 0   FALSE:16        #>  +proj=long...: 0   TRUE :9         #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL autoplot(arr, int_circles) +   geom_sf(data = circles, fill = NA, color = \"red\") st_disjoint(tab, circles) #> Sparse geometry binary predicate list of length 5, where the predicate #> was `disjoint' #>  1: 1, 2 #>  2: 1, 2 #>  3: 2 #>  4: (empty) #>  5: 1 st_disjoint(face_temporal(tab), circles) #> Sparse geometry binary predicate list of length 25, where the predicate #> was `disjoint' #> first 10 elements: #>  1: 1, 2 #>  2: 1, 2 #>  3: 1, 2 #>  4: 1, 2 #>  5: 1, 2 #>  6: 1, 2 #>  7: 1, 2 #>  8: 1, 2 #>  9: 1, 2 #>  10: 1, 2 sum(st_disjoint(arr$geometry, circles, sparse = FALSE)) #> [1] 39 sum(st_disjoint(face_temporal(tab), circles, sparse = FALSE)) #> [1] 39"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"sec-spatfilt","dir":"Articles","previous_headings":"","what":"Spatial filtering","title":"Compatibility with other packages","text":"predicates shown particularly relevant use inside spatial filtering operations. sf::st_filter() work post_array objects. See Section¬†3.3 example mask cube values spatially. work post_table objects, spatial temporal face. spatial filtering needs applied changing geometry post_array object, can first convert post_table, perform filtering temporal face convert back post_array object.","code":"st_filter(arr) #> Error in UseMethod(\"st_filter\"): no applicable method for 'st_filter' applied to an object of class \"c('post_array', 'stars')\" st_filter(arr$geometry) #> Error in UseMethod(\"st_filter\"): no applicable method for 'st_filter' applied to an object of class \"c('sfc_POLYGON', 'sfc')\" st_filter(tab, circles) #> # cubble:   key: gid [3], index: datetime, nested form, [sf] #> # spatial:  [0.18, -0.01, 0.99, 0.72], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat                                               geom_sum ts    #> * <chr> <dbl> <dbl>                                          <POLYGON [¬∞]> <lis> #> 1 c     0.402 0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, 0.4712468‚Ä¶ <sf>  #> 2 d     0.744 0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, 0.8247802‚Ä¶ <sf>  #> 3 e     0.467 0.180 ((0.6988282 0.004623805, 0.2489107 -0.01302429, 0.234‚Ä¶ <sf> st_filter(face_temporal(tab), circles) #> # cubble:   key: gid [2], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], has gaps! #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>   gid   datetime                                                        geometry #> * <chr> <date>                                                     <POLYGON [¬∞]> #> 1 c     2020-10-01 ((0.2807462 0.6277986, 0.3325024 0.7215057, 0.5164992 0.5964‚Ä¶ #> 2 c     2020-10-02 ((0.328914 0.5687438, 0.3806701 0.6624509, 0.5646669 0.53743‚Ä¶ #> 3 c     2020-10-03 ((0.2897647 0.6168588, 0.3415208 0.710566, 0.5357965 0.49222‚Ä¶ #> 4 c     2020-10-05 ((0.2145846 0.5285578, 0.2663408 0.6222649, 0.4503375 0.4972‚Ä¶ #> 5 d     2020-10-01 ((0.7650701 0.4744459, 0.8787185 0.375316, 0.8266421 0.28905‚Ä¶ #> 6 d     2020-10-02 ((0.7217233 0.5261787, 0.8353717 0.4270488, 0.7832953 0.3407‚Ä¶ #> 7 d     2020-10-03 ((0.6752472 0.4565396, 0.7888956 0.3574097, 0.6915808 0.2158‚Ä¶ #> 8 d     2020-10-04 ((0.6687306 0.4190113, 0.7593946 0.3399296, 0.6862765 0.2335‚Ä¶ #> 9 d     2020-10-05 ((0.8594322 0.4155757, 0.9730806 0.3164458, 0.9210042 0.2301‚Ä¶ arr |>    as_post_table() |>    face_temporal() |>    st_filter(circles) |>    as_post_array() #> Warning: st_centroid assumes attributes are constant over geometries #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>  int_circles            geometry   #>  Mode:logical   POLYGON      :10   #>  TRUE:9         epsg:4326    : 0   #>  NA's:1         +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  2         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                  values #> geom_sum POLYGON ((0.3321 0.7218, 0...., POLYGON ((0.6634 0.573, 0.9... #> datetime                                                           NULL"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"geometric-measurements-and-unary-operations","dir":"Articles","previous_headings":"","what":"Geometric measurements and unary operations","title":"Compatibility with other packages","text":"Geometric measurements (?sf::geos_measures) can applied summary changing geometries : Unary operations (?sf::geos_unary) can applied post objects different behaviors expected. post_array operation performed changing geometries extracting geometries. operation applied post_table geometry column gets updated new geometry type.  Original summary geometry: minimum rotated rectangle  Updated summary geometry: centroid","code":"# post_array st_area(st_geometry(arr)) #> Units: [m^2] #> [1] 1445426306 3909318595 1225404011 1343229189 2047852426 st_area(arr$geometry) #> Units: [m^2] #>  [1]  693272313 1537008395  394944271  392819049  585061160  693260956 #>  [7] 1537040160  394948297  392816498  585062691  405985931 1319132956 #> [13]  182397989  385893114  585064729  220231724  965402936   53657361 #> [19]  227321366  384440186  693268587 1536993945  394950797  392821562 #> [25]  585064518 #post_table st_area(tab) #> Units: [m^2] #> [1] 1445426306 3909318595 1225404011 1343229189 2047852426 st_area(face_temporal(tab)) #> Units: [m^2] #>  [1]  693272313  693260956  405985931  220231724  693268587 1537008395 #>  [7] 1537040160 1319132956  965402936 1536993945  394944271  394948297 #> [13]  182397989   53657361  394950797  392819049  392816498  385893114 #> [19]  227321366  392821562  585061160  585062691  585064729  384440186 #> [25]  585064518 st_boundary(arr$geometry) #> Geometry set for 25 features  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> LINESTRING (0.5474949 0.8088912, 0.4874872 0.88... #> LINESTRING (0.2791708 0.8337388, -0.2847997 0.6... #> LINESTRING (0.2807462 0.6277986, 0.3325024 0.72... #> LINESTRING (0.7650701 0.4744459, 0.8787185 0.37... #> LINESTRING (0.3825692 0.3537803, 0.5519791 0.36... st_centroid(tab) #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.02, 0.18, 0.74, 0.89], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid      long   lat                geom_sum ts           #>   <chr>   <dbl> <dbl>             <POINT [¬∞]> <list>       #> 1 a      0.638  0.885   (0.6382744 0.8853982) <sf [5 √ó 2]> #> 2 b     -0.0180 0.768 (-0.01803554 0.7676183) <sf [5 √ó 2]> #> 3 c      0.402  0.507   (0.4016835 0.5066305) <sf [5 √ó 2]> #> 4 d      0.744  0.341   (0.7440853 0.3409447) <sf [5 √ó 2]> #> 5 e      0.467  0.180   (0.4666607 0.1795801) <sf [5 √ó 2]> plot(tab$geom_sum) plot(st_centroid(tab)$geom_sum) #> Warning: st_centroid assumes attributes are constant over geometries"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"dplyr-compatibility","dir":"Articles","previous_headings":"","what":"dplyr compatibility","title":"Compatibility with other packages","text":"post classes support dplyr methods long don‚Äôt alter vector data cube structure. See available methods ?dplyr-post-array ?dplyr-post-table. specific behaviors functions explained . dplyr::mutate() function modifies existing object creating modifying existing columns. useful combination geometric measurement functions sf. instance, can compute area changing geometry : post_table objects also possible use summary geoemtry. Following sf design sticky geometry, post_array post_table methods, spatial temporal cubes sticky geometries applying dplyr methods. post_table objects, cubble also applies sticky concept key (group_id), index (time_column) coords, prints message inform . usefulness two classes post lies ability apply certain functions tabular format functions array format conversion. , however, certain issues taken account . filtering subsetting operation applied post_array, can handle emptiness, converting post_table get error. can however empty post_table objects filtering conversion. converting sf post_array object post_table, single time value per group supported. can , however, post_table single time value per group creation. default behavior dplyr::slice() stars post_table objects drop dimensions single value. saw 2, brings problems converting post_table general also generates types issues. Make habit using drop = FALSE instead.","code":"arr |>    mutate(area = st_area(geometry)) #> stars object with 2 dimensions and 3 attributes #> attribute(s): #>          geometry   int_circles       area [m^2]        #>  POLYGON      :25   Mode :logical   Min.   :5.366e+07   #>  epsg:4326    : 0   FALSE:16        1st Qu.:3.928e+08   #>  +proj=long...: 0   TRUE :9         Median :4.060e+08   #>                                     Mean   :6.216e+08   #>                                     3rd Qu.:6.933e+08   #>                                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL tab |>    face_temporal() |>    mutate(area = st_area(geometry)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime                                                geometry   area #>  * <chr> <date>                                             <POLYGON [¬∞]>  [m^2] #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.552005‚Ä¶ 6.93e8 #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209‚Ä¶ 6.93e8 #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717‚Ä¶ 4.06e8 #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 ‚Ä¶ 2.20e8 #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.610889‚Ä¶ 6.93e8 #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825‚Ä¶ 1.54e9 #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318‚Ä¶ 1.54e9 #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.097774‚Ä¶ 1.32e9 #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.123111‚Ä¶ 9.65e8 #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951‚Ä¶ 1.54e9 #> # ‚Ñπ 15 more rows tab |> mutate(area = st_area(geom_sum)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.42, -0.01, 0.99, 1.17], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid      long   lat                                      geom_sum ts      area #> * <chr>   <dbl> <dbl>                                 <POLYGON [¬∞]> <lis>  [m^2] #> 1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.‚Ä¶ <sf>  1.45e9 #> 2 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853,‚Ä¶ <sf>  3.91e9 #> 3 c      0.402  0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, ‚Ä¶ <sf>  1.23e9 #> 4 d      0.744  0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, ‚Ä¶ <sf>  1.34e9 #> 5 e      0.467  0.180 ((0.6988282 0.004623805, 0.2489107 -0.013024‚Ä¶ <sf>  2.05e9 (arr2 = arr |>    mutate(     area = st_area(geometry),     perimeter = st_perimeter(geometry) )) #> stars object with 2 dimensions and 4 attributes #> attribute(s): #>          geometry   int_circles       area [m^2]        perimeter [m]    #>  POLYGON      :25   Mode :logical   Min.   :5.366e+07   Min.   : 40715   #>  epsg:4326    : 0   FALSE:16        1st Qu.:3.928e+08   1st Qu.: 80659   #>  +proj=long...: 0   TRUE :9         Median :4.060e+08   Median : 96203   #>                                     Mean   :6.216e+08   Mean   :102089   #>                                     3rd Qu.:6.933e+08   3rd Qu.:107075   #>                                     Max.   :1.537e+09   Max.   :172705   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL arr2 |> select(perimeter) #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>  perimeter [m]            geometry   #>  Min.   : 40715   POLYGON      :25   #>  1st Qu.: 80659   epsg:4326    : 0   #>  Median : 96203   +proj=long...: 0   #>  Mean   :102089                      #>  3rd Qu.:107075                      #>  Max.   :172705                      #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL (tab2 = tab |>     face_temporal() |>      mutate(       area = st_area(geometry),       perimeter = st_perimeter(geometry) )) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime                                      geometry   area perimeter #>  * <chr> <date>                                   <POLYGON [¬∞]>  [m^2]       [m] #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477‚Ä¶ 6.93e8   107076. #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795,‚Ä¶ 6.93e8   107075. #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448,‚Ä¶ 4.06e8    96203. #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, ‚Ä¶ 2.20e8    70856. #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744‚Ä¶ 6.93e8   107075. #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.654019‚Ä¶ 1.54e9   172703. #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.581486‚Ä¶ 1.54e9   172705. #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332‚Ä¶ 1.32e9   171452. #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799‚Ä¶ 9.65e8   146674. #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.685279‚Ä¶ 1.54e9   172702. #> # ‚Ñπ 15 more rows tab2 |> select(perimeter) #> ‚Ñπ Missing attribute `gid` and `datetime`, add it back. #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime   perimeter                                           geometry #>  * <chr> <date>           [m]                                      <POLYGON [¬∞]> #>  1 a     2020-10-01   107076. ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.552‚Ä¶ #>  2 a     2020-10-02   107075. ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006‚Ä¶ #>  3 a     2020-10-03    96203. ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520‚Ä¶ #>  4 a     2020-10-04    70856. ((0.5652241 0.872057, 0.5685463 1.036898, 0.78190‚Ä¶ #>  5 a     2020-10-05   107075. ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.610‚Ä¶ #>  6 b     2020-10-01   172703. ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2‚Ä¶ #>  7 b     2020-10-02   172705. ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2‚Ä¶ #>  8 b     2020-10-03   171452. ((0.3796448 0.767853, -0.1843257 0.5881332, 0.097‚Ä¶ #>  9 b     2020-10-04   146674. ((0.3642467 0.779727, -0.1182199 0.6259799, 0.123‚Ä¶ #> 10 b     2020-10-05   172702. ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2‚Ä¶ #> # ‚Ñπ 15 more rows arr2 |>    as_post_table() |>    face_temporal() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime   int_circles        area perimeter                   geometry #>  * <chr> <date>     <lgl>             [m^2]       [m]              <POLYGON [¬∞]> #>  1 a     2020-10-01 FALSE        693272313.   107076. ((0.5474949 0.8088912, 0.‚Ä¶ #>  2 a     2020-10-02 FALSE        693260956.   107075. ((0.4961102 0.8728385, 0.‚Ä¶ #>  3 a     2020-10-03 FALSE        405985931.    96203. ((0.5578801 0.8616378, 0.‚Ä¶ #>  4 a     2020-10-04 FALSE        220231724.    70856. ((0.5652241 0.872057, 0.5‚Ä¶ #>  5 a     2020-10-05 FALSE        693268587.   107075. ((0.6063791 0.8304178, 0.‚Ä¶ #>  6 b     2020-10-01 FALSE       1537008395.   172703. ((0.2791708 0.8337388, -0‚Ä¶ #>  7 b     2020-10-02 FALSE       1537040160.   172705. ((0.3298312 0.7612067, -0‚Ä¶ #>  8 b     2020-10-03 FALSE       1319132956.   171452. ((0.3796448 0.767853, -0.‚Ä¶ #>  9 b     2020-10-04 FALSE        965402936.   146674. ((0.3642467 0.779727, -0.‚Ä¶ #> 10 b     2020-10-05 FALSE       1536993945.   172702. ((0.2665368 0.8649996, -0‚Ä¶ #> # ‚Ñπ 15 more rows as_post_array(polygons)[circles] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry  #>  POLYGON      :5   #>  epsg:4326    :0   #>  +proj=long...:0   #> dimension(s): #>          from to     offset  delta refsys point                values #> geom_sum    4  4         NA     NA WGS 84  TRUE POINT (0.7628 0.3648) #> datetime    1  5 2020-10-01 1 days   Date    NA                  NULL as_post_array(polygons)[circles] |> as_post_table() #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]> as_post_array(polygons) |>    as_post_table() |>    st_filter(circles) #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]> arr |>    filter(datetime == \"2020-10-01\") |>    as_post_table() #> Error in `as_post_table()`: #> ! `x` has only one time value per group #> <post_table> creation requires at least two time values arr |>    as_post_table() |>    face_temporal() |>    filter(datetime == \"2020-10-01\") |>    face_spatial() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.42, -0.01, 0.99, 1.17], WGS 84 #> # temporal: datetime [date], int_circles [lgl], geometry [POLYGON [¬∞]] #>   gid      long   lat                                             geom_sum ts    #> * <chr>   <dbl> <dbl>                                        <POLYGON [¬∞]> <lis> #> 1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7627607‚Ä¶ <sf>  #> 2 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, -0.027‚Ä¶ <sf>  #> 3 c      0.402  0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, 0.47124‚Ä¶ <sf>  #> 4 d      0.744  0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, 0.82478‚Ä¶ <sf>  #> 5 e      0.467  0.180 ((0.6988282 0.004623805, 0.2489107 -0.01302429, 0.2‚Ä¶ <sf> arr |>    slice(\"datetime\", 1) #> stars object with 1 dimensions and 2 attributes #> attribute(s): #>          geometry  int_circles     #>  POLYGON      :5   Mode :logical   #>  epsg:4326    :0   FALSE:3         #>  +proj=long...:0   TRUE :2         #> dimension(s): #>          from to refsys point #> geom_sum    1  5 WGS 84 FALSE #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... arr |>    slice(\"geom_sum\", 1, drop = FALSE) |>    as_post_table() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.38, 0.65, 0.9, 1.12], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid   int_circles  long   lat                                   geom_sum ts    #> * <chr> <lgl>       <dbl> <dbl>                              <POLYGON [¬∞]> <lis> #> 1 a     FALSE       0.638 0.885 ((0.5137787 1.117004, 0.9005707 0.866971,‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"modifying-columns","dir":"Articles","previous_headings":"","what":"Modifying columns","title":"Compatibility with other packages","text":"dplyr::mutate() function modifies existing object creating modifying existing columns. useful combination geometric measurement functions sf. instance, can compute area changing geometry : post_table objects also possible use summary geoemtry.","code":"arr |>    mutate(area = st_area(geometry)) #> stars object with 2 dimensions and 3 attributes #> attribute(s): #>          geometry   int_circles       area [m^2]        #>  POLYGON      :25   Mode :logical   Min.   :5.366e+07   #>  epsg:4326    : 0   FALSE:16        1st Qu.:3.928e+08   #>  +proj=long...: 0   TRUE :9         Median :4.060e+08   #>                                     Mean   :6.216e+08   #>                                     3rd Qu.:6.933e+08   #>                                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL tab |>    face_temporal() |>    mutate(area = st_area(geometry)) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime                                                geometry   area #>  * <chr> <date>                                             <POLYGON [¬∞]>  [m^2] #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.552005‚Ä¶ 6.93e8 #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006209‚Ä¶ 6.93e8 #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520717‚Ä¶ 4.06e8 #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, 0.7819022 ‚Ä¶ 2.20e8 #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.610889‚Ä¶ 6.93e8 #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2825‚Ä¶ 1.54e9 #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2318‚Ä¶ 1.54e9 #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332, 0.097774‚Ä¶ 1.32e9 #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799, 0.123111‚Ä¶ 9.65e8 #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2951‚Ä¶ 1.54e9 #> # ‚Ñπ 15 more rows tab |> mutate(area = st_area(geom_sum)) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.42, -0.01, 0.99, 1.17], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid      long   lat                                      geom_sum ts      area #> * <chr>   <dbl> <dbl>                                 <POLYGON [¬∞]> <lis>  [m^2] #> 1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.‚Ä¶ <sf>  1.45e9 #> 2 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853,‚Ä¶ <sf>  3.91e9 #> 3 c      0.402  0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, ‚Ä¶ <sf>  1.23e9 #> 4 d      0.744  0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, ‚Ä¶ <sf>  1.34e9 #> 5 e      0.467  0.180 ((0.6988282 0.004623805, 0.2489107 -0.013024‚Ä¶ <sf>  2.05e9"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"sticky-geometry","dir":"Articles","previous_headings":"","what":"Sticky geometry","title":"Compatibility with other packages","text":"Following sf design sticky geometry, post_array post_table methods, spatial temporal cubes sticky geometries applying dplyr methods. post_table objects, cubble also applies sticky concept key (group_id), index (time_column) coords, prints message inform .","code":"(arr2 = arr |>    mutate(     area = st_area(geometry),     perimeter = st_perimeter(geometry) )) #> stars object with 2 dimensions and 4 attributes #> attribute(s): #>          geometry   int_circles       area [m^2]        perimeter [m]    #>  POLYGON      :25   Mode :logical   Min.   :5.366e+07   Min.   : 40715   #>  epsg:4326    : 0   FALSE:16        1st Qu.:3.928e+08   1st Qu.: 80659   #>  +proj=long...: 0   TRUE :9         Median :4.060e+08   Median : 96203   #>                                     Mean   :6.216e+08   Mean   :102089   #>                                     3rd Qu.:6.933e+08   3rd Qu.:107075   #>                                     Max.   :1.537e+09   Max.   :172705   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL arr2 |> select(perimeter) #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>  perimeter [m]            geometry   #>  Min.   : 40715   POLYGON      :25   #>  1st Qu.: 80659   epsg:4326    : 0   #>  Median : 96203   +proj=long...: 0   #>  Mean   :102089                      #>  3rd Qu.:107075                      #>  Max.   :172705                      #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... #> datetime                                                          NULL (tab2 = tab |>     face_temporal() |>      mutate(       area = st_area(geometry),       perimeter = st_perimeter(geometry) )) #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime                                      geometry   area perimeter #>  * <chr> <date>                                   <POLYGON [¬∞]>  [m^2]       [m] #>  1 a     2020-10-01 ((0.5474949 0.8088912, 0.4874872 0.8838477‚Ä¶ 6.93e8   107076. #>  2 a     2020-10-02 ((0.4961102 0.8728385, 0.4361026 0.947795,‚Ä¶ 6.93e8   107075. #>  3 a     2020-10-03 ((0.5578801 0.8616378, 0.5623908 1.085448,‚Ä¶ 4.06e8    96203. #>  4 a     2020-10-04 ((0.5652241 0.872057, 0.5685463 1.036898, ‚Ä¶ 2.20e8    70856. #>  5 a     2020-10-05 ((0.6063791 0.8304178, 0.5463715 0.9053744‚Ä¶ 6.93e8   107075. #>  6 b     2020-10-01 ((0.2791708 0.8337388, -0.2847997 0.654019‚Ä¶ 1.54e9   172703. #>  7 b     2020-10-02 ((0.3298312 0.7612067, -0.2341393 0.581486‚Ä¶ 1.54e9   172705. #>  8 b     2020-10-03 ((0.3796448 0.767853, -0.1843257 0.5881332‚Ä¶ 1.32e9   171452. #>  9 b     2020-10-04 ((0.3642467 0.779727, -0.1182199 0.6259799‚Ä¶ 9.65e8   146674. #> 10 b     2020-10-05 ((0.2665368 0.8649996, -0.2974337 0.685279‚Ä¶ 1.54e9   172702. #> # ‚Ñπ 15 more rows tab2 |> select(perimeter) #> ‚Ñπ Missing attribute `gid` and `datetime`, add it back. #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime   perimeter                                           geometry #>  * <chr> <date>           [m]                                      <POLYGON [¬∞]> #>  1 a     2020-10-01   107076. ((0.5474949 0.8088912, 0.4874872 0.8838477, 0.552‚Ä¶ #>  2 a     2020-10-02   107075. ((0.4961102 0.8728385, 0.4361026 0.947795, 0.5006‚Ä¶ #>  3 a     2020-10-03    96203. ((0.5578801 0.8616378, 0.5623908 1.085448, 0.8520‚Ä¶ #>  4 a     2020-10-04    70856. ((0.5652241 0.872057, 0.5685463 1.036898, 0.78190‚Ä¶ #>  5 a     2020-10-05   107075. ((0.6063791 0.8304178, 0.5463715 0.9053744, 0.610‚Ä¶ #>  6 b     2020-10-01   172703. ((0.2791708 0.8337388, -0.2847997 0.6540191, -0.2‚Ä¶ #>  7 b     2020-10-02   172705. ((0.3298312 0.7612067, -0.2341393 0.5814869, -0.2‚Ä¶ #>  8 b     2020-10-03   171452. ((0.3796448 0.767853, -0.1843257 0.5881332, 0.097‚Ä¶ #>  9 b     2020-10-04   146674. ((0.3642467 0.779727, -0.1182199 0.6259799, 0.123‚Ä¶ #> 10 b     2020-10-05   172702. ((0.2665368 0.8649996, -0.2974337 0.6852798, -0.2‚Ä¶ #> # ‚Ñπ 15 more rows"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"wrangle-and-conversion","dir":"Articles","previous_headings":"","what":"Wrangle and conversion","title":"Compatibility with other packages","text":"usefulness two classes post lies ability apply certain functions tabular format functions array format conversion. , however, certain issues taken account . filtering subsetting operation applied post_array, can handle emptiness, converting post_table get error. can however empty post_table objects filtering conversion. converting sf post_array object post_table, single time value per group supported. can , however, post_table single time value per group creation. default behavior dplyr::slice() stars post_table objects drop dimensions single value. saw 2, brings problems converting post_table general also generates types issues. Make habit using drop = FALSE instead.","code":"arr2 |>    as_post_table() |>    face_temporal() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, long form #> # temporal: 2020-10-01 -- 2020-10-05 [1D], no gaps #> # spatial:  long [dbl], lat [dbl], geom_sum [POLYGON [¬∞]] #>    gid   datetime   int_circles        area perimeter                   geometry #>  * <chr> <date>     <lgl>             [m^2]       [m]              <POLYGON [¬∞]> #>  1 a     2020-10-01 FALSE        693272313.   107076. ((0.5474949 0.8088912, 0.‚Ä¶ #>  2 a     2020-10-02 FALSE        693260956.   107075. ((0.4961102 0.8728385, 0.‚Ä¶ #>  3 a     2020-10-03 FALSE        405985931.    96203. ((0.5578801 0.8616378, 0.‚Ä¶ #>  4 a     2020-10-04 FALSE        220231724.    70856. ((0.5652241 0.872057, 0.5‚Ä¶ #>  5 a     2020-10-05 FALSE        693268587.   107075. ((0.6063791 0.8304178, 0.‚Ä¶ #>  6 b     2020-10-01 FALSE       1537008395.   172703. ((0.2791708 0.8337388, -0‚Ä¶ #>  7 b     2020-10-02 FALSE       1537040160.   172705. ((0.3298312 0.7612067, -0‚Ä¶ #>  8 b     2020-10-03 FALSE       1319132956.   171452. ((0.3796448 0.767853, -0.‚Ä¶ #>  9 b     2020-10-04 FALSE        965402936.   146674. ((0.3642467 0.779727, -0.‚Ä¶ #> 10 b     2020-10-05 FALSE       1536993945.   172702. ((0.2665368 0.8649996, -0‚Ä¶ #> # ‚Ñπ 15 more rows as_post_array(polygons)[circles] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry  #>  POLYGON      :5   #>  epsg:4326    :0   #>  +proj=long...:0   #> dimension(s): #>          from to     offset  delta refsys point                values #> geom_sum    4  4         NA     NA WGS 84  TRUE POINT (0.7628 0.3648) #> datetime    1  5 2020-10-01 1 days   Date    NA                  NULL as_post_array(polygons)[circles] |> as_post_table() #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]> as_post_array(polygons) |>    as_post_table() |>    st_filter(circles) #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]> arr |>    filter(datetime == \"2020-10-01\") |>    as_post_table() #> Error in `as_post_table()`: #> ! `x` has only one time value per group #> <post_table> creation requires at least two time values arr |>    as_post_table() |>    face_temporal() |>    filter(datetime == \"2020-10-01\") |>    face_spatial() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.42, -0.01, 0.99, 1.17], WGS 84 #> # temporal: datetime [date], int_circles [lgl], geometry [POLYGON [¬∞]] #>   gid      long   lat                                             geom_sum ts    #> * <chr>   <dbl> <dbl>                                        <POLYGON [¬∞]> <lis> #> 1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7627607‚Ä¶ <sf>  #> 2 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, -0.027‚Ä¶ <sf>  #> 3 c      0.402  0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, 0.47124‚Ä¶ <sf>  #> 4 d      0.744  0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, 0.82478‚Ä¶ <sf>  #> 5 e      0.467  0.180 ((0.6988282 0.004623805, 0.2489107 -0.01302429, 0.2‚Ä¶ <sf> arr |>    slice(\"datetime\", 1) #> stars object with 1 dimensions and 2 attributes #> attribute(s): #>          geometry  int_circles     #>  POLYGON      :5   Mode :logical   #>  epsg:4326    :0   FALSE:3         #>  +proj=long...:0   TRUE :2         #> dimension(s): #>          from to refsys point #> geom_sum    1  5 WGS 84 FALSE #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... arr |>    slice(\"geom_sum\", 1, drop = FALSE) |>    as_post_table() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.38, 0.65, 0.9, 1.12], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid   int_circles  long   lat                                   geom_sum ts    #> * <chr> <lgl>       <dbl> <dbl>                              <POLYGON [¬∞]> <lis> #> 1 a     FALSE       0.638 0.885 ((0.5137787 1.117004, 0.9005707 0.866971,‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"post_table-cannot-be-created-from-an-empty-post_array-","dir":"Articles","previous_headings":"","what":"1. post_table cannot be created from an empty post_array.","title":"Compatibility with other packages","text":"filtering subsetting operation applied post_array, can handle emptiness, converting post_table get error. can however empty post_table objects filtering conversion.","code":"as_post_array(polygons)[circles] #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry  #>  POLYGON      :5   #>  epsg:4326    :0   #>  +proj=long...:0   #> dimension(s): #>          from to     offset  delta refsys point                values #> geom_sum    4  4         NA     NA WGS 84  TRUE POINT (0.7628 0.3648) #> datetime    1  5 2020-10-01 1 days   Date    NA                  NULL as_post_array(polygons)[circles] |> as_post_table() #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]> as_post_array(polygons) |>    as_post_table() |>    st_filter(circles) #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.76, 0.36, 0.76, 0.36], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid    long   lat              geom_sum ts           #> * <chr> <dbl> <dbl>           <POINT [¬∞]> <list>       #> 1 d     0.763 0.365 (0.7627982 0.3647986) <sf [5 √ó 2]>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"post_table-requires-at-least-two-time-values-per-group-for-creation","dir":"Articles","previous_headings":"","what":"2. post_table requires at least two time values per group for creation","title":"Compatibility with other packages","text":"converting sf post_array object post_table, single time value per group supported. can , however, post_table single time value per group creation.","code":"arr |>    filter(datetime == \"2020-10-01\") |>    as_post_table() #> Error in `as_post_table()`: #> ! `x` has only one time value per group #> <post_table> creation requires at least two time values arr |>    as_post_table() |>    face_temporal() |>    filter(datetime == \"2020-10-01\") |>    face_spatial() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.42, -0.01, 0.99, 1.17], WGS 84 #> # temporal: datetime [date], int_circles [lgl], geometry [POLYGON [¬∞]] #>   gid      long   lat                                             geom_sum ts    #> * <chr>   <dbl> <dbl>                                        <POLYGON [¬∞]> <lis> #> 1 a      0.638  0.885 ((0.5137787 1.117004, 0.9005707 0.866971, 0.7627607‚Ä¶ <sf>  #> 2 b     -0.0180 0.768 ((-0.008469583 1.165177, 0.3796448 0.767853, -0.027‚Ä¶ <sf>  #> 3 c      0.402  0.507 ((0.3321185 0.7217665, 0.6273178 0.5211933, 0.47124‚Ä¶ <sf>  #> 4 d      0.744  0.341 ((0.6633875 0.5730321, 0.9881167 0.3122207, 0.82478‚Ä¶ <sf>  #> 5 e      0.467  0.180 ((0.6988282 0.004623805, 0.2489107 -0.01302429, 0.2‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/articles/post03_compatibility.html","id":"do-not-drop-dimensions-when-slicing-post_array-objects","dir":"Articles","previous_headings":"","what":"3. Do not drop dimensions when slicing post_array objects","title":"Compatibility with other packages","text":"default behavior dplyr::slice() stars post_table objects drop dimensions single value. saw 2, brings problems converting post_table general also generates types issues. Make habit using drop = FALSE instead.","code":"arr |>    slice(\"datetime\", 1) #> stars object with 1 dimensions and 2 attributes #> attribute(s): #>          geometry  int_circles     #>  POLYGON      :5   Mode :logical   #>  epsg:4326    :0   FALSE:3         #>  +proj=long...:0   TRUE :2         #> dimension(s): #>          from to refsys point #> geom_sum    1  5 WGS 84 FALSE #>                                                                 values #> geom_sum POLYGON ((0.5137787 1.117...,...,POLYGON ((0.6988282 0.004... arr |>    slice(\"geom_sum\", 1, drop = FALSE) |>    as_post_table() #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [1], index: datetime, nested form, [sf] #> # spatial:  [0.38, 0.65, 0.9, 1.12], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid   int_circles  long   lat                                   geom_sum ts    #> * <chr> <lgl>       <dbl> <dbl>                              <POLYGON [¬∞]> <lis> #> 1 a     FALSE       0.638 0.885 ((0.5137787 1.117004, 0.9005707 0.866971,‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lorena Abad. Author, maintainer.","code":""},{"path":"https://loreabad6.github.io/post/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abad L (2025). post: Polygon changes space time. R package version 0.0.0.9000, https://loreabad6.github.io/post/.","code":"@Manual{,   title = {post: Polygon changes in space and time},   author = {Lorena Abad},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://loreabad6.github.io/post/}, }"},{"path":"https://loreabad6.github.io/post/index.html","id":"post-polygon-changes-in-space-and-time-","dir":"","previous_headings":"","what":"Polygon changes in space and time","title":"Polygon changes in space and time","text":"goal post provide array tabular vector data cube structures organise analyse polygons change shape space time.","code":""},{"path":"https://loreabad6.github.io/post/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Polygon changes in space and time","text":"can install development version post like : post currently work progress repository holds first implementation along issues possible features integration packages cubble, stars. Stay tuned!","code":"remotes::install_github(\"loreabad6/post\")"},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a post_array object ‚Äî as_post_array","title":"Create a post_array object ‚Äî as_post_array","text":"post_array spatio-temporal array data structure organises polygons change shape space time. extends stars class vector data cubes support changing geometries attributes. post_array class supports two dimensions: summary geometry dimension (default name: geom_sum) temporal dimension. summary geometry unique geometry per group summarises changing shapes polygon geometries group.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a post_array object ‚Äî as_post_array","text":"","code":"as_post_array(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   geometry_summary_name = NULL,   ... )  # S3 method for class 'sf' as_post_array(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   geometry_summary_name = NULL,   ...,   point_st = c(NA, FALSE) )  # S3 method for class 'post_table' as_post_array(x, ...)  # S3 method for class 'stars' as_post_array(x, ...)  # S3 method for class 'post_array' as_post_array(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a post_array object ‚Äî as_post_array","text":"x object convert post_array POLYGON/MULTIPOLYGON geometries date/time column. group_id See Details. Defaults first non-spatial, non-temporal column x. time_column_name (character) name column temporal dimension information. Defaults first temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. geometry_summary (function) function compute summary geometry. Alternatively sfc object summary geometries (.e., result summarise_geometry_*() function custom sfc). See summarise_geometry functions pass summarise_geometry function. geometry_summary_name (character) name column summary geometries.Defaults \"geom_sum\" ... additional parameters passed geometry_summary function. point_st point argument passed onto stars::st_dimensions(). Defaults NA spatial dimension (assigned geometry type) FALSE temporal dimension (assumes interval times)","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a post_array object ‚Äî as_post_array","text":"object class post_array.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a post_array object ‚Äî as_post_array","text":"group_id name column containing grouping identifier changing polygons vector group identifiers. Character, integer, double factor vectors supported. vector length 1 nrow(x). vector length 1 repeats value rows. Providing vector assumes ordering groups correct duplicated timestamps per group","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a post_array object ‚Äî as_post_array","text":"Abad, L., Sudmanns, M., H√∂lbling, D. (2024) Vector data cubes features evolving space time, AGILE GIScience Ser., 5, 16, https://doi.org/10.5194/agile-giss-5-16-2024","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a post_array object ‚Äî as_post_array","text":"","code":"as_post_array(polygons) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>          geometry   #>  POLYGON      :25   #>  epsg:4326    : 0   #>  +proj=long...: 0   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84  TRUE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                              values #> geom_sum POINT (0.6526028 0.901785),...,POINT (0.4718622 0.1952443) #> datetime                                                       NULL  if(require(dplyr, quietly = TRUE)) {   library(sf, quietly = TRUE)   polygons |>     mutate(area = st_area(geometry)) |>     as_post_array(      geometry_summary = summarise_geometry_union    ) } #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE #> stars object with 2 dimensions and 2 attributes #> attribute(s): #>          geometry       area            #>  POLYGON      :25   Min.   :5.366e+07   #>  epsg:4326    : 0   1st Qu.:3.928e+08   #>  +proj=long...: 0   Median :4.060e+08   #>                     Mean   :6.216e+08   #>                     3rd Qu.:6.933e+08   #>                     Max.   :1.537e+09   #> dimension(s): #>          from to     offset  delta refsys point #> geom_sum    1  5         NA     NA WGS 84 FALSE #> datetime    1  5 2020-10-01 1 days   Date    NA #>                                                                 values #> geom_sum POLYGON ((0.4971355 0.871...,...,POLYGON ((0.2973931 0.255... #> datetime                                                          NULL"},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a post_table object ‚Äî as_post_table","title":"Create a post_table object ‚Äî as_post_table","text":"post_table spatio-temporal tabular data structure organises polygons change shape space time. extends cubble_df classes vector data cubes support changing geometries temporal face cube. post_table geometry spatial face cube defaults column named geom_sum, changing geometry provided passed temporal face cube.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a post_table object ‚Äî as_post_table","text":"","code":"as_post_table(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   ... )  # S3 method for class 'sf' as_post_table(   x,   group_id = NULL,   time_column_name = NULL,   sf_column_name = NULL,   geometry_summary = summarise_geometry_centroid,   ... )  # S3 method for class 'post_array' as_post_table(x, ..., drop_empty = TRUE)  # S3 method for class 'post_table' as_post_table(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a post_table object ‚Äî as_post_table","text":"x object convert post_table POLYGON/MULTIPOLYGON geometries date/time column. group_id See Details. Defaults first non-spatial, non-temporal column x. time_column_name (character) name column temporal dimension information. Defaults first temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. geometry_summary (function) function compute summary geometry. Alternatively sfc object summary geometries (.e., result summarise_geometry_*() function custom sfc). See summarise_geometry functions pass summarise_geometry function. ... additional parameters passed geometry_summary function. drop_empty (logical) empty geometries dropped post_table creation? Defaults TRUE","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a post_table object ‚Äî as_post_table","text":"object class post_table.","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a post_table object ‚Äî as_post_table","text":"group_id name column containing grouping identifier changing polygons vector group identifiers. Character, integer, double factor vectors supported. vector length 1 nrow(x). vector length 1 repeats value rows. Providing vector assumes ordering groups correct duplicated timestamps per group","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a post_table object ‚Äî as_post_table","text":"Abad, L., Sudmanns, M., H√∂lbling, D. (2024) Vector data cubes features evolving space time, AGILE GIScience Ser., 5, 16, https://doi.org/10.5194/agile-giss-5-16-2024","code":""},{"path":"https://loreabad6.github.io/post/reference/as_post_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a post_table object ‚Äî as_post_table","text":"","code":"as_post_table(polygons) #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.01, 0.2, 0.76, 0.9], WGS 84 #> # temporal: datetime [date], geometry [POLYGON [¬∞]] #>   gid       long   lat                 geom_sum ts           #> * <chr>    <dbl> <dbl>              <POINT [¬∞]> <list>       #> 1 a      0.653   0.902     (0.6526028 0.901785) <sf [5 √ó 2]> #> 2 b     -0.00954 0.855 (-0.009536052 0.8549277) <sf [5 √ó 2]> #> 3 c      0.393   0.557    (0.3932031 0.5571231) <sf [5 √ó 2]> #> 4 d      0.763   0.365    (0.7627982 0.3647986) <sf [5 √ó 2]> #> 5 e      0.472   0.195    (0.4718622 0.1952443) <sf [5 √ó 2]>  if(require(dplyr, quietly = TRUE)) {   library(sf, quietly = TRUE)   polygons |>     mutate(area = st_area(geometry)) |>     as_post_table(      geometry_summary = summarise_geometry_union    ) } #> Warning: st_centroid assumes attributes are constant over geometries #> # cubble:   key: gid [5], index: datetime, nested form, [sf] #> # spatial:  [-0.3, 0, 0.97, 1.15], WGS 84 #> # temporal: datetime [date], area [[m^2]], geometry [POLYGON [¬∞]] #>   gid       long   lat                                            geom_sum ts    #> * <chr>    <dbl> <dbl>                                       <POLYGON [¬∞]> <lis> #> 1 a      0.648   0.902 ((0.4971355 0.8717961, 0.5474949 0.8088912, 0.5905‚Ä¶ <sf>  #> 2 b     -0.00254 0.840 ((-0.1774445 0.5995572, -0.1843257 0.5881332, 0.37‚Ä¶ <sf>  #> 3 c      0.390   0.541 ((0.28657 0.6085207, 0.2663408 0.6222649, 0.214584‚Ä¶ <sf>  #> 4 d      0.753   0.354 ((0.5737123 0.4613799, 0.6063966 0.4263975, 0.5272‚Ä¶ <sf>  #> 5 e      0.469   0.178 ((0.2973931 0.2557416, 0.2813385 0.2544898, 0.2452‚Ä¶ <sf>"},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"Plots changing summary geometries post_array post_table facets defined first non spatial dimension. dimensions discarded.","code":""},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"","code":"autoplot.post_array(   object,   attribute = NULL,   max_plot = 9,   geom_sum = FALSE,   ... )  autoplot.post_table(   object,   attribute = NULL,   max_plot = 9,   geom_sum = FALSE,   ... )"},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"object post_array post_table object attribute attribute fill geometries max_plot maximum number subplots rendered geom_sum geom_sum geometries used plotting? Defaults FALSE ... ignored","code":""},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"object class ggplot","code":""},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"See ggplot2::autoplot().","code":""},{"path":"https://loreabad6.github.io/post/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot post_array or post_table with ggplot2 ‚Äî autoplot","text":"","code":"library(ggplot2) library(sf) arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) arr$area = st_area(arr$geometry) autoplot(arr, area)  autoplot(arr, area, geom_sum = TRUE)  autoplot(arr, area, max_plot = 3)   tab = as_post_table(polygons, geometry_summary = summarise_geometry_union) #> Warning: st_centroid assumes attributes are constant over geometries autoplot(tab, gid)  autoplot(tab, gid, geom_sum = TRUE)"},{"path":"https://loreabad6.github.io/post/reference/binary-predicates-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","title":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","text":"sf geometry predicates post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/binary-predicates-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","text":"","code":"st_mask(x, y, .predicate = st_intersects, ...)"},{"path":"https://loreabad6.github.io/post/reference/binary-predicates-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","text":"x post_array object y object class sf, sfc, sfg .predicate binary predicate use (see ?sf::geos_binary_pred), defaults st_intersects ... passed geometry predicate","code":""},{"path":"https://loreabad6.github.io/post/reference/binary-predicates-post-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","text":"one column matrix result features y relating feature x","code":""},{"path":"https://loreabad6.github.io/post/reference/binary-predicates-post-array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sf geometry predicates for post_array objects ‚Äî binary-predicates-post-array","text":"","code":"library(sf) arr = as_post_array(polygons, geometry_summary = summarise_geometry_union) circles = list(st_point(c(0.55,0.5)), st_point(c(0.75,0.4))) |>   st_sfc(crs = 4326) |>   st_buffer(10000) st_mask(arr, circles) #>        [,1] #>  [1,] FALSE #>  [2,] FALSE #>  [3,]  TRUE #>  [4,]  TRUE #>  [5,] FALSE #>  [6,] FALSE #>  [7,] FALSE #>  [8,]  TRUE #>  [9,]  TRUE #> [10,] FALSE #> [11,] FALSE #> [12,] FALSE #> [13,]  TRUE #> [14,]  TRUE #> [15,] FALSE #> [16,] FALSE #> [17,] FALSE #> [18,] FALSE #> [19,]  TRUE #> [20,] FALSE #> [21,] FALSE #> [22,] FALSE #> [23,]  TRUE #> [24,]  TRUE #> [25,] FALSE arr$circles_disjoint = st_mask(arr, circles, .predicate = st_disjoint)"},{"path":"https://loreabad6.github.io/post/reference/classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove or restore post_* classes ‚Äî classes","title":"Remove or restore post_* classes ‚Äî classes","text":"Utility functions remove/restore post_table/post_array classes passing functions onto stars, spatial_cubble_df temporal_cubble_df","code":""},{"path":"https://loreabad6.github.io/post/reference/classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove or restore post_* classes ‚Äî classes","text":"","code":"remove_post_table(x)  restore_post_table(x)  restore_spatial_post_table(x)  restore_temporal_post_table(x)  remove_post_array(x, attr_rm = FALSE)  restore_post_array(x, x_orig)"},{"path":"https://loreabad6.github.io/post/reference/classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove or restore post_* classes ‚Äî classes","text":"x object inherits stars class. attr_rm logical; attributes related post_array also removed? Defaults FALSE x_orig object inherits post_array class","code":""},{"path":"https://loreabad6.github.io/post/reference/classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove or restore post_* classes ‚Äî classes","text":"object inherits removes classes post_table/post_array sf.","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cubble attributes ‚Äî cubble-attrs","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"Extract cubble attributes","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"","code":"# S3 method for class 'post_table' spatial(data)"},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"data post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-attrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cubble attributes ‚Äî cubble-attrs","text":"post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":null,"dir":"Reference","previous_headings":"","what":"Face spatial/temporal method for post_table ‚Äî cubble-face","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"face_spatial pivots post_table object long (temporal) nested (spatial) form. face_temporal() pivots post_table object nested (spatial) long (temporal) form. post_table objects, activates changing geometry long form.","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"","code":"# S3 method for class 'post_table' face_spatial(data)  # S3 method for class 'post_table' face_temporal(data, col)  # S3 method for class 'post_table' unfold(data, ...)"},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"data post_table object col see cubble::face_temporal() details. ... see cubble::unfold()","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Face spatial/temporal method for post_table ‚Äî cubble-face","text":"post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Gap-filling on cubble ‚Äî cubble-fill","title":"Gap-filling on cubble ‚Äî cubble-fill","text":"Gap-filling cubble","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gap-filling on cubble ‚Äî cubble-fill","text":"","code":"# S3 method for class 'post_table' fill_gaps(.data, ..., .full, .start, .end)"},{"path":"https://loreabad6.github.io/post/reference/cubble-fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gap-filling on cubble ‚Äî cubble-fill","text":".data post_table object ... see ?tsibble::fill_gaps .full see ?tsibble::fill_gaps .start see ?tsibble::fill_gaps .end see ?tsibble::fill_gaps","code":""},{"path":"https://loreabad6.github.io/post/reference/cubble-fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gap-filling on cubble ‚Äî cubble-fill","text":"post_table object","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr methods for post_array ‚Äî dplyr-post-array","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"dplyr methods post_array","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"","code":"# S3 method for class 'post_array' filter(.data, ...)  # S3 method for class 'post_array' mutate(.data, ...)  # S3 method for class 'post_array' rename(.data, ...)  # S3 method for class 'post_array' select(.data, ...)  # S3 method for class 'post_array' slice(.data, ...)  # S3 method for class 'post_array' transmute(.data, ...)"},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"... see corresponding function package dplyr data, .data post_array object","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dplyr methods for post_array ‚Äî dplyr-post-array","text":"See ?stars::dplyr details","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr methods for post_table ‚Äî dplyr-post-table","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"dplyr methods post_table","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"","code":"# S3 method for class 'post_table' dplyr_reconstruct(data, template)  # S3 method for class 'post_table' arrange(.data, ...)  # S3 method for class 'post_table' filter(.data, ...)  # S3 method for class 'post_table' mutate(.data, ...)  # S3 method for class 'post_table' rename(.data, ...)  # S3 method for class 'post_table' select(.data, ...)  # S3 method for class 'post_table' slice(.data, ..., .dots)"},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"data, .data post_table object template Template data frame use restoring attributes. ... see corresponding function package dplyr .dots see corresponding function package dplyr","code":""},{"path":"https://loreabad6.github.io/post/reference/dplyr-post-table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dplyr methods for post_table ‚Äî dplyr-post-table","text":"See ??cubble::dplyr details See ?sf::tidyverse details","code":""},{"path":"https://loreabad6.github.io/post/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot post_array with plot.stars default ‚Äî plot","title":"Plot post_array with plot.stars default ‚Äî plot","text":"Plots post_array default plot.stars() function taking first non-spatial attribute. summary geometry used plotting. non-spatial attribute available, plot function returns error. Try autoplot.post_array() achieve type plots plot changing geometries.","code":""},{"path":"https://loreabad6.github.io/post/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot post_array with plot.stars default ‚Äî plot","text":"","code":"# S3 method for class 'post_array' plot(x, y, ...)  # S3 method for class 'post_table' plot(x, y, ...)"},{"path":"https://loreabad6.github.io/post/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot post_array with plot.stars default ‚Äî plot","text":"x object class post_array pr post_table y ignored ... passed plot.stars()","code":""},{"path":[]},{"path":"https://loreabad6.github.io/post/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot post_array with plot.stars default ‚Äî plot","text":"","code":"library(sf) arr = as_post_array(polygons) arr$area = st_area(arr$geometry) plot(arr)"},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Random polygons to exemplify post functions ‚Äî polygons","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"Five random polygons 5 time-stamp states artificially generated exemplify main functionality post. See data-raw/polygons.R code creation.","code":""},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"","code":"polygons"},{"path":"https://loreabad6.github.io/post/reference/polygons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random polygons to exemplify post functions ‚Äî polygons","text":"object class sf POLYGON geometries, Date 25 rows 3 columns: gid ID polygon geometry datetime datetime polygon geometry geometry geometry list column","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"sf methods for post_array objects ‚Äî sf-post-array","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"sf methods post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"","code":"# S3 method for class 'post_array' st_as_sf(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"x post_array object ... arguments passed sf::st_as_sf()","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sf methods for post_array objects ‚Äî sf-post-array","text":"sf::st_as_sf() post_array objects sets changing geometry active sf_column keeps summarised geometry separate column.","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":null,"dir":"Reference","previous_headings":"","what":"sf methods for post_table objects ‚Äî sf-post-table","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"sf methods post_table objects","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"","code":"# S3 method for class 'post_table' st_as_sf(x, ...)  # S3 method for class 'post_table' st_crs(x) <- value  # S3 method for class 'post_table' st_normalize(   x,   domain = st_bbox(suppressMessages(face_spatial(x), \"cliMessage\")),   ... )  # S3 method for class 'post_table' st_shift_longitude(x, ...)  # S3 method for class 'post_table' st_transform(x, crs, ...)  # S3 method for class 'post_table' st_wrap_dateline(x, ...)  # S3 method for class 'post_table' st_zm(x, ...)"},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"x post_table object ... additional arguments passed onto respective sf function value one () character: string accepted GDAL, (ii) integer, valid EPSG value (numeric), (iii) object class crs. domain domain x normalized length 4 vector form c(xmin, ymin, xmax, ymax). Defaults bounding box x crs target coordinate reference system: object class crs, input string st_crs","code":""},{"path":"https://loreabad6.github.io/post/reference/sf-post-table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sf methods for post_table objects ‚Äî sf-post-table","text":"sf::st_as_sf() post_table objects sets changing geometry active sf_column keeps summarised geometry separate column. st_normalize() takes domain bounding box post_table nested form (spatial face)","code":""},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":null,"dir":"Reference","previous_headings":"","what":"stars methods for post_array objects ‚Äî stars","title":"stars methods for post_array objects ‚Äî stars","text":"stars methods post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stars methods for post_array objects ‚Äî stars","text":"","code":"# S3 method for class 'post_array' x[...]"},{"path":"https://loreabad6.github.io/post/reference/stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stars methods for post_array objects ‚Äî stars","text":"x post_array object ... additional arguments passed onto respective stars function","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"Changing geometries summarised time periods single geometry (types POINT, POLYGON, MULTIPOLYGON) order pass spatial dimension post_* objects. family functions summarise_geometry_*() summarize_geometry_*() helpers create summarised geometries.","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"","code":"summarise_geometry_union(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )  summarize_geometry_union(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )  summarise_geometry_centroid(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )  summarize_geometry_centroid(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )  summarise_geometry_bbox(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE,   rotated = FALSE )  summarize_geometry_bbox(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE,   rotated = FALSE )  summarise_geometry_convex_hull(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )  summarize_geometry_convex_hull(   x,   group_id = NULL,   sf_column_name = NULL,   return_sf = FALSE,   .checks = TRUE )"},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"x object POLYGON/MULTIPOLYGON changing geometries summarise based group_id. group_id see ?post_array details. Defaults first non-spatial, non-temporal column x. sf_column_name (character) name column changing geometries. Defaults active sf_column. return_sf sf returned group_ids column? .checks internal, creation arguments checked? rotated (logical) TRUE, minimum rotated rectangle returned, FALSE minimum unrotated rectangle bounding box returned. Defaults FALSE","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"object class sfc summarised geometries based group_id","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"custom function summarise geometries can passed onto coercion functions as_post_*(), given parameters x, group_id sf_column_name included function. Additional arguments can passed function necessary. See vignette(\"post02_geomsum\") information.","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"summarise_geometry_union(): computes geometry summary union dissolve changing geometries summarise_geometry_centroid(): computes geometry summary centroid union dissolve changing geometries summarise_geometry_bbox(): computes geometry summary bounding box minimum rectangle union dissolve changing geometries summarise_geometry_convex_hull(): computes geometry summary convex hull union dissolve changing geometries","code":""},{"path":"https://loreabad6.github.io/post/reference/summarise_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise changing geometries based on a group identifier ‚Äî summarise_geometry","text":"","code":"# union and dissolve summarise_geometry_union(polygons) #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.0029756 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.4971355 0.8717961, 0.5474949 0.8088... #> POLYGON ((-0.1774445 0.5995572, -0.1843257 0.58... #> POLYGON ((0.28657 0.6085207, 0.2663408 0.622264... #> POLYGON ((0.5737123 0.4613799, 0.6063966 0.4263... #> POLYGON ((0.2973931 0.2557416, 0.2813385 0.2544... # centroid summarise_geometry_centroid(polygons) #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.009536052 ymin: 0.1952443 xmax: 0.7627982 ymax: 0.901785 #> Geodetic CRS:  WGS 84 #> POINT (0.6526028 0.901785) #> POINT (-0.009536052 0.8549277) #> POINT (0.3932031 0.5571231) #> POINT (0.7627982 0.3647986) #> POINT (0.4718622 0.1952443) # bounding box or minimum unrotated rectangle summarise_geometry_bbox(polygons) #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.4361026 0.7456421, 0.9005707 0.7456... #> POLYGON ((-0.2974337 0.5814869, 0.3796448 0.581... #> POLYGON ((0.2145846 0.4039274, 0.5898739 0.4039... #> POLYGON ((0.5272362 0.1748722, 0.9730806 0.1748... #> POLYGON ((0.2452129 -0.00297557, 0.6988282 -0.0... # minimum rotated rectangle summarise_geometry_bbox(polygons, rotated = TRUE) #> Warning: st_minimum_rotated_rectangle does not work correctly for longitude/latitude data #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.4157149 ymin: -0.01302429 xmax: 0.9881167 ymax: 1.165177 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.5137787 1.117004, 0.9005707 0.86697... #> POLYGON ((-0.008469583 1.165177, 0.3796448 0.76... #> POLYGON ((0.3321185 0.7217665, 0.6273178 0.5211... #> POLYGON ((0.6633875 0.5730321, 0.9881167 0.3122... #> POLYGON ((0.6988282 0.004623805, 0.2489107 -0.0... # convex hull summarise_geometry_convex_hull(polygons) #> Geometry set for 5 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -0.2974337 ymin: -0.00297557 xmax: 0.9730806 ymax: 1.153558 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.7568336 0.7456421, 0.8157179 0.7671... #> POLYGON ((-0.2341393 0.5814869, -0.1843257 0.58... #> POLYGON ((0.4606164 0.4039274, 0.5749458 0.4441... #> POLYGON ((0.8757658 0.1748722, 0.8918794 0.1923... #> POLYGON ((0.505091 -0.00297557, 0.6988282 0.004..."},{"path":"https://loreabad6.github.io/post/reference/svalbard.html","id":null,"dir":"Reference","previous_headings":"","what":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","title":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","text":"Selected glacier digital glacier dataset compiled released K√∂nig et al. (2013).","code":""},{"path":"https://loreabad6.github.io/post/reference/svalbard.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","text":"object class sf POLYGON geometries 25 rows 3 columns: name Glacier name year year glacier delineation length Maximum glacier length glacier tongue head accumulation area fwidth Average width glacier tongue geom geometry list column","code":""},{"path":"https://loreabad6.github.io/post/reference/svalbard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","text":"glaciers share name single year, polygons combined MULTIPOLYGON. cases, maximum LENGTH FWIDTH taken feature. two detached glaciers Midtre Lovenbreen year 2007 delineated originally 2009. year changed 2007 keep congruent data.","code":""},{"path":"https://loreabad6.github.io/post/reference/svalbard.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","text":"K√∂nig, M., Kohler J., Nuth C. (2013). ‚ÄúGlacier Area Outlines - Svalbard 1936-2010.‚Äù Norwegian Polar Institute. https://doi.org/10.21334/npolar.2013.89f430f8. K√∂nig, M., Nuth, C., Kohler, J., Moholdt, G. Pettersen, R. (2014). ‚ÄúDigital Glacier Database Svalbard.‚Äù Global Land Ice Measurements Space, 229‚Äì39. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-540-79818-7_10.","code":""},{"path":"https://loreabad6.github.io/post/reference/svalbard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Svalbard glaciers subset to exemplify post functions ‚Äî svalbard","text":"","code":"library(sf) svalbard = st_read(system.file(\"extdata/svalbard.gpkg\", package=\"post\")) #> Reading layer `svalbard_glaciers_subset' from data source  #>   `/home/runner/work/_temp/Library/post/extdata/svalbard.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 15 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 428910.1 ymin: 8754278 xmax: 440637.1 ymax: 8762561 #> Projected CRS: WGS 84 / UTM zone 33N"},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for post_array objects ‚Äî utils-post-array","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"Utility functions post_array objects","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"","code":"get_group_ids(x)"},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"x post_array object","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"data.frame group_id values","code":""},{"path":"https://loreabad6.github.io/post/reference/utils-post-array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for post_array objects ‚Äî utils-post-array","text":"get_group_ids() gets group_id values post_array object named data.frame","code":""},{"path":"https://loreabad6.github.io/post/news/index.html","id":"post-development-version","dir":"Changelog","previous_headings":"","what":"post (development version)","title":"post (development version)","text":"Initial CRAN submission.","code":""}]
