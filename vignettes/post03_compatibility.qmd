---
title: "Compatibility with other packages"
vignette: >
  %\VignetteIndexEntry{Compatibility with other packages}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{quarto::html}
format:
  html:
    toc: true
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
    dev.args:
      bg: transparent
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| warning: false
#| message: false
library(post)
library(cubble)
library(sf)
library(stars)
library(tidyverse)
library(tsibble)
```

The classes provided in `post` are designed so that the majority of functions and methods available for `cubble` or `stars` objects are still applicable to `post_*` objects, while keeping the post class and attributes in the process. 

The main compatibility functions are presented in this vignette. 

## `cubble` compatibility

Objects of class `post_table` are compatible with most of `cubble`s methods as presented below. 

### Spatial and temporal faces

The main functionalities of `{cubble}` are the ability to do analyses on the spatial or on the temporal faces of the vector data cube. 
For this, the functions `cubble::face_spatial()` and `cubble::face_temporal()` are provided.
The spatial face is the default state of a cubble object.

```{r}
tab = as_post_table(polygons)
face_spatial(tab)
face_temporal(tab)
```

### Attribute extraction

Extracting `cubble` attributes is also possible. cubble follows the attributes from `{tsibble}` objects, where the `key` is equivalent to the group identifier and the `index` is equivalent to the temporal column in `post_table` objects.

```{r}
cubble::coords(tab)
cubble::index(tab)
tsibble::key(tab)
cubble::spatial(tab)
```

### Gap filling with tsibble

`cubble` also supports compatibility with some `tsibble` functions, namely gap filling, `tsibble::fill_gaps()`. 
If we sample the original polygon to create random gaps, we can use this function to fill them with NA values and empty geometries. 

```{r}
set.seed(324)
tab_gaps = polygons |> 
  sample_n(13) |> 
  as_post_table() 
tab_gaps |> face_temporal()
tab_gaps |> face_temporal() |> fill_gaps()
```

The function `tsibble::scan_gaps()` on the other hand does not return a `post_table` object since all the geometries would be `EMPTY` and the inherit structure of a post object is lost.

```{r}
tab_gaps |> face_temporal() |> scan_gaps()
```

### Glyph maps

For visualisation, `cubble` provides the `cubble::geom_glyph()` function to be used with `{ggplot2}` plots. 
This geom is useful to have a quick glance at the temporal variation of specific variables while also being aware of the spatial distribution of the features. 

To use this one with `post_table` objects we have to unfold the `long` and `lat` functions into the temporal face of the vector data cube. 

Then, to pass it onto the ggplot function, the `post_table` class should be dropped to avoid conflicts. The utility function `remove_post_table()` is provided for this purpose. 

```{r}
tab_union = as_post_table(polygons, geometry_summary = summarise_geometry_union)
tab_unf = polygons |> 
  mutate(area = as.numeric(st_area(geometry))) |> 
  as_post_table() |> 
  face_temporal() |> 
  unfold(long, lat)

ggplot(remove_post_table(tab_unf)) +
  aes(x_major = long, y_major = lat, x_minor = datetime, y_minor = area) +
  geom_sf(data = tab_union, fill = "grey80", color = NA, inherit.aes = FALSE) +
  geom_glyph_box(width = 0.18, height = 0.1) +
  geom_glyph(aes(color = area), width = 0.18, height = 0.1, linewidth = 0.7) +
  scale_color_viridis_c() +
  theme_bw()
```

## `stars` compatibility

Objects of class `post_array` inherit also the `stars` class, so most of the methods for stars objects are applicable to post objects as shown below. 

### Subsetting

`stars` and hence `post_array` objects are in esence arrays, therefore we can use the `[` operator for subsetting (see more on its usage [on the corresponding stars vignette](https://r-spatial.github.io/stars/articles/stars1.html#subsetting).

```{r}
arr = as_post_array(polygons, geometry_summary = summarise_geometry_union)
# subset first two features
arr[,1:2,]
# subset last three timestamps
arr[,,3:5]
```

Note how the number of geometries in the attributes varies according to the subsetting operation.

When extracting the attributes themselves, the `[[` can be used. 
Note that the `geometry` attribute in the `arr` object we created is an `sfc` object but it has dimensions.

```{r}
arr[[1]]
class(arr[[1]])
dim(arr[[1]])
```

We can also create new attributes, for example:

```{r}
arr$area = st_area(arr[[1]])
arr
```

And the functionality to use `[` as a "crop" operator is also supported.
However, in this case a spatial filtering rather than a cropping operation takes place.

```{r}
circle = st_point(c(0.6,0.5)) |>
  st_sfc(crs = 4326) |>
  st_buffer(10000)
arr[circle]
```

Note that the spatial dimension `geom_sum` is the one that gets filtered and not the changing geometries [^1].
Therefore, the filtered `post_array` will also keep geometries that do not intersect `circle` by themselves but their summary geometry does.

[^1]: see section ... on how to perform a spatial filter of the changing geometries

```{r}
par(mar = c(0,0,0,0))
plot(arr$geometry, col = "grey80", border = "white")
plot(circle, col = "deepskyblue3", border = NA, add = TRUE)
plot(arr[circle]$geometry, border = "firebrick1", add = TRUE)
```

### Apply functions to array dimensions

<!-- 
TODO: test st_apply, maybe examples with stampr 
https://r-spatial.github.io/stars/reference/st_apply.html
-->

## `sf` compatibility

Geometric operations on pairs of simple features (see `?sf::geos_binary_ops`) are not supported for post objects since they change the topology of the object in ways that can't be reconstructed without further knowledge on how summary and changing polygons should be adapted.

## `dplyr` compatibility

## cells or rows?

slice method for post_array: drop=TRUE should be used if then coercing to post_table

<!-- ## Raster - Vector Data Cube integration -->

<!-- TODO: st_extract example with time interpolation -->
<!-- possibly a different vignette -->
<!-- https://r-spatial.github.io/stars/reference/st_extract.html -->
