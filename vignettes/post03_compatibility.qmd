---
title: "Compatibility with other packages"
vignette: >
  %\VignetteIndexEntry{Compatibility with other packages}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{quarto::html}
format:
  html:
    toc: true
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
    dev.args:
      bg: transparent
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| warning: false
#| message: false
library(post)
library(cubble)
library(sf)
library(stars)
library(tidyverse)
library(tsibble)
```

The classes provided in `post` are designed so that the majority of functions and methods available for `cubble` or `stars` objects are still applicable to `post_*` objects, while keeping the post class and attributes in the process. 

The main compatibility functions are presented in this vignette. 

## `cubble` compatibility

Objects of class `post_table` are compatible with most of `cubble`s methods as presented below. 

### Spatial and temporal faces

The main functionalities of `{cubble}` are the ability to do analyses on the spatial or on the temporal faces of the vector data cube. 
For this, the functions `cubble::face_spatial()` and `cubble::face_temporal()` are provided.
The spatial face is the default state of a cubble object.

```{r}
tab = as_post_table(polygons)
face_spatial(tab)
face_temporal(tab)
```

### Attribute extraction

Extracting `cubble` attributes is also possible. cubble follows the attributes from `{tsibble}` objects, where the `key` is equivalent to the group identifier and the `index` is equivalent to the temporal column in `post_table` objects.

```{r}
cubble::coords(tab)
cubble::index(tab)
tsibble::key(tab)
cubble::spatial(tab)
```

### Gap filling with tsibble

`cubble` also supports compatibility with some `tsibble` functions, namely gap filling, `tsibble::fill_gaps()`. 
If we sample the original polygon to create random gaps, we can use this function to fill them with NA values and empty geometries. 

```{r}
set.seed(324)
tab_gaps = polygons[sample(nrow(polygons), 13), ] |> 
  as_post_table() 
tab_gaps |> face_temporal()
tab_gaps |> face_temporal() |> fill_gaps()
```

The function `tsibble::scan_gaps()` on the other hand does not return a `post_table` object since all the geometries would be `EMPTY` and the inherit structure of a post object is lost.

```{r}
tab_gaps |> face_temporal() |> scan_gaps()
```

### Glyph maps

For visualisation, `cubble` provides the `cubble::geom_glyph()` function to be used with `{ggplot2}` plots. 
This geom is useful to have a quick glance at the temporal variation of specific variables while also being aware of the spatial distribution of the features. 

To use this one with `post_table` objects we have to unfold the `long` and `lat` functions into the temporal face of the vector data cube. 

Then, to pass it onto the ggplot function, the `post_table` class should be dropped to avoid conflicts. The utility function `remove_post_table()` is provided for this purpose. 

```{r}
tab_union = as_post_table(polygons, geometry_summary = summarise_geometry_union)
tab_unf = polygons |> 
  mutate(area = as.numeric(st_area(geometry))) |> 
  as_post_table() |> 
  face_temporal() |> 
  unfold(long, lat)

ggplot(remove_post_table(tab_unf)) +
  aes(x_major = long, y_major = lat, x_minor = datetime, y_minor = area) +
  geom_sf(data = tab_union, fill = "grey80", color = NA, inherit.aes = FALSE) +
  geom_glyph_box(width = 0.18, height = 0.1) +
  geom_glyph(aes(color = area), width = 0.18, height = 0.1, linewidth = 0.7) +
  scale_color_viridis_c() +
  theme_bw()
```

## `stars` compatibility

Objects of class `post_array` inherit also the `stars` class, so most of the methods for stars objects are applicable to post objects as shown below. 

### Subsetting

`stars` and hence `post_array` objects are in esence arrays, therefore we can use the `[` operator for subsetting (see more on its usage [on the corresponding stars vignette](https://r-spatial.github.io/stars/articles/stars1.html#subsetting)).

```{r}
arr = as_post_array(polygons, geometry_summary = summarise_geometry_union)
# subset first two features
arr[,1:2,]
# subset last three timestamps
arr[,,3:5]
```

Note how the number of geometries in the attributes varies according to the subsetting operation.

When extracting the attributes themselves, the `[[` can be used. 
Note that the `geometry` attribute in the `arr` object we created is an `sfc` object but it has dimensions.

```{r}
arr[[1]]
class(arr[[1]])
dim(arr[[1]])
```

We can also create new attributes, for example:

```{r}
arr$area = st_area(arr[[1]])
arr
```

And the functionality to use `[` as a "crop" operator is also supported.
However, in this case a spatial filtering rather than a cropping operation takes place.

```{r}
circles = list(st_point(c(0.55,0.5)), st_point(c(0.75,0.4))) |>
  st_sfc(crs = 4326) |>
  st_buffer(10000)
arr[circles]
```

Note that the spatial dimension `geom_sum` is the one that gets filtered and not the changing geometries [^1].
Therefore, the filtered `post_array` also keeps geometries that do not intersect `circles` by themselves but their summary geometry does.

[^1]: see section @sec-spatfilt on how to perform a spatial filter of the changing geometries

```{r}
par(mar = c(0,0,0,0))
plot(arr$geometry, col = "grey80", border = "white")
plot(circles, col = "deepskyblue3", border = NA, add = TRUE)
plot(arr[circles]$geometry, border = "firebrick1", add = TRUE)
```

### Apply functions to array dimensions

*Needs input* 

<!-- 
TODO: test st_apply, maybe examples with stampr 
https://r-spatial.github.io/stars/reference/st_apply.html
-->

## `sf` compatibility

Both post classes, i.e. `post_array` and `post_table` support most sf methods since they inherit implicitly or explicitly the `sf` or `sfc` class. 

Methods that are not supported for post objects include: 

- Geometric operations on pairs of simple features (see `?sf::geos_binary_ops`) are not supported for post objects since they change the topology of the object in ways that can't be reconstructed without further knowledge on how summary and changing polygons should be adapted.

### Converting to `sf`

When converting a `post_*` object to `sf` both the summary and changing geometries are preserved, and the changing geometry is set as the active geometry.
Converting from `post_table` also includes the coordinate columns created by cubble.

```{r}
# post_array
arr = as_post_array(polygons,
                    geometry_summary = summarise_geometry_bbox, 
                    rotated = TRUE)
st_as_sf(arr)
# post_table
tab = as_post_table(polygons,
                    geometry_summary = summarise_geometry_bbox, 
                    rotated = TRUE)
st_as_sf(tab)
```

### CRS transformation

<!-- TODO: check if/why `st_crs<-` should work for post_array as well, skipped for now -->

When transforming the CRS, both the changing and the summary geometry are updated within the `post_*` object.

```{r}
# post_array
st_transform(arr, 3035)
# post_table
st_transform(tab, 3035)
st_transform(tab, 3035) |> face_temporal()
```

### Geometric binary predicates {#sec-binary}

Geometric binary predicates (`?sf::geos_binary_pred`) are supported by `post_*` objects in different ways.

In `post_array` objects, you can apply geometric binary predicates to the changing geometries with the function `st_mask()`. 
The result is a one column matrix as the result of any features in y relating to any feature in x.
If you still want to get the relation through a binary predicate as it works in `sf`, then you should call the function on the changing geometries. 

```{r}
st_mask(arr, circles, .predicate = st_disjoint)
st_disjoint(arr$geometry, circles)
```

With this in mind, we can also create a new dimension with the result of a binary predicate geometric operation, similar to a mask.
Since this is a new attribute in our cube, the dimensions are preserved.

```{r}
arr$int_circles = st_mask(arr, circles)
arr
autoplot(arr, int_circles) +
  geom_sf(data = circles, fill = NA, color = "red")
```

For `post_table` objects, the predicates can be applied to either the spatial or the temporal face of the vector data cube. 

```{r}
st_disjoint(tab, circles)
st_disjoint(face_temporal(tab), circles)
```

Applying the predicate to the changing geometry of `post_array` objects renders the same result as applying it to the `post_table` objects in the long format or on its temporal face. 

```{r}
sum(st_disjoint(arr$geometry, circles, sparse = FALSE))
sum(st_disjoint(face_temporal(tab), circles, sparse = FALSE))
```

### Spatial filtering {#sec-spatfilt}

The predicates shown above are particularly relevant to use inside spatial filtering operations.

`sf::st_filter()` does not work on `post_array` objects. See @sec-binary for an example on how to mask the cube values spatially.

```{r}
#| error: true
st_filter(arr)
st_filter(arr$geometry)
```

But it does work on `post_table` objects, both for the spatial and temporal face.

```{r}
st_filter(tab, circles)
st_filter(face_temporal(tab), circles)
```

When a spatial filtering needs to be applied to the changing geometry of a `post_array` object, we can first convert to `post_table`, perform the filtering on the temporal face and then convert back to a `post_array` object. 

```{r}
arr |> 
  as_post_table() |> 
  face_temporal() |> 
  st_filter(circles) |> 
  as_post_array()
```

### Geometric measurements and unary operations

Geometric measurements (`?sf::geos_measures`) can be applied to the summary and changing geometries as:

```{r}
# post_array
st_area(st_geometry(arr))
st_area(arr$geometry)
#post_table
st_area(tab)
st_area(face_temporal(tab))
```

Unary operations (`?sf::geos_unary`) can be applied to post objects but different behaviors are to be expected. 
For `post_array` the operation is performed on the changing geometries by extracting the geometries. 

```{r}
st_boundary(arr$geometry)
```

If the operation is applied to a `post_table` the geometry column gets updated to the new geometry type.

```{r}
st_centroid(tab)
```

```{r}
#| layout-ncol: 2
#| fig-width: 8.5
#| fig-height: 6
#| fig-cap: 
#|   - "Original summary geometry: minimum rotated rectangle"
#|   - "Updated summary geometry: centroid"
plot(tab$geom_sum)
plot(st_centroid(tab)$geom_sum)
```

## `dplyr` compatibility

Both post classes support `{dplyr}` methods as long as they don't alter the vector data cube structure. 
See the available methods in `?dplyr-post-array` and `?dplyr-post-table`.
Some specific behaviors of these functions are explained below.

### Modifying columns

The `dplyr::mutate()` function modifies the existing object by creating or modifying existing columns. 
It is useful in combination with geometric measurement functions from sf. 
For instance, we can compute the area of the changing geometry as:

```{r}
arr |> 
  mutate(area = st_area(geometry))
tab |> 
  face_temporal() |> 
  mutate(area = st_area(geometry))
```

For `post_table` objects it is also possible to use them in the summary geoemtry.

```{r}
tab |> mutate(area = st_area(geom_sum))
```

### Sticky geometry

Following the sf design of an sticky geometry, both `post_array` and `post_table` methods, as spatial or temporal cubes have sticky geometries when applying dplyr methods.

```{r}
(arr2 = arr |> 
  mutate(
    area = st_area(geometry),
    perimeter = st_perimeter(geometry)
))
arr2 |> select(perimeter)
```

For `post_table` objects, cubble also applies a sticky concept for the `key` (`group_id`), `index` (`time_column`) and `coords`, and prints a message to inform you about it.

```{r}
(tab2 = tab |> 
   face_temporal() |> 
    mutate(
      area = st_area(geometry),
      perimeter = st_perimeter(geometry)
))
tab2 |> select(perimeter)
```

### Wrangle and conversion

The usefulness of having two classes in `post` lies on the ability to apply certain functions in the tabular format and then other functions on the array format with conversion. 

```{r}
arr2 |> 
  as_post_table() |> 
  face_temporal()
```


There are, however, certain issues to be taken into account when doing this.

#### 1. `post_table` cannot be created from an empty `post_array`.

If a filtering or subsetting operation is applied to a `post_array`, which can handle emptiness, when converting to a `post_table` we get an error.

```{r}
#| error: true
as_post_array(polygons)[circles]
as_post_array(polygons)[circles] |> as_post_table()
```

We can however have empty `post_table` objects by doing the filtering after conversion.

```{r}
as_post_array(polygons) |> 
  as_post_table() |> 
  st_filter(circles)
```

#### 2. `post_table` requires at least two time values per group for creation

When converting and `sf` or `post_array` object to `post_table`, a single time value per group is not supported.

```{r}
#| error: true
arr |> 
  filter(datetime == "2020-10-01") |> 
  as_post_table()
```

You can have, however, a `post_table` with a single time value per group after its creation.

```{r}
arr |> 
  as_post_table() |> 
  face_temporal() |> 
  filter(datetime == "2020-10-01") |> 
  face_spatial()
```

#### 3. Do not drop dimensions when slicing `post_array` objects

The default behavior of `dplyr::slice()` for stars and post_table objects is to drop dimensions with a single value.

```{r}
arr |> 
  slice("datetime", 1)
```

As we saw in *2*, this brings problems when converting to a `post_table` but in general it also generates other types of issues. 
Make a habit of using `drop = FALSE` instead.

```{r}
arr |> 
  slice("geom_sum", 1, drop = FALSE) |> 
  as_post_table()
```
