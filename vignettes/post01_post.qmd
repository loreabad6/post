---
title: "Vector data cube structures"
vignette: >
  %\VignetteIndexEntry{Vector data cube structures}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{quarto::html}
format:
  html:
    toc: true
    fig-width: 8.5
    fig-height: 4
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
    dev.args:
      bg: transparent
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
par(mar = c(0,0,0,0))
```

`post` (POlygon changes in Space and Time) is a package designed to provide array and tabular vector data cube structures to organise and analyse polygons that change their shape in space and time. 

`post` takes two existing packages that support vector data cubes: `{stars}` for array vector data cubes and `{cubble}` for tabular vector data cubes. 
It extends their functionality to support changing geometries and to perform spatio-temporal analyses of vector data. 

Particularly, `post` was created to analyse the evolution of geomorphological features such as landslides, lava flows, and glaciers, which change their geometry over time. However, it can be used to analyse other types of moving and/or changing geometries, for example, urban sprawl.

## Vector data cubes

::: {.grid}

::: {.g-col-9}
Data cubes are multi-dimensional data structures.
The most commonly known data cubes, particularly in Earth observation (EO), are **raster data cubes**. 
Raster data cubes are structures frequently used to organise time series of satellite imagery, gridded climate data, etc.
They have minimum two spatial dimensions: *longitude* or *x* and *latitude* or *y*. 
The remainder dimensions can either be *time*, or other dimension such as *bands* for EO data.
:::

::: {.g-col-3}
![](figs/raster-data-cube.png)
:::

:::

::: {.grid}

::: {.g-col-3}
![](figs/vector-data-cube.png)
:::

::: {.g-col-9}
On the other hand, **vector data cubes** support one minimum spatial dimension, a *geometry*.
Representing data in vector data cubes becomes useful when thematic variables are changing over time at the vector locations, i.e. for spatio-temporal data.
For example, time series of temperature, precipitation, wind speed, etc. recorded by climate stations can be represented and analysed using vector data cubes.
However, current implementations of vector data cubes only support static geometries (e.g. climate stations stay at the same place over time).
`post` intends to provide support also for geometries that change over time.
:::

:::

## Post classes

In R, vector data cube structures are supported in the form of array objects by the `{stars}` package and as tabular objects[^1] with the `{cubble}` package.
`{sf}` is used both by cubble and stars to handle the spatial dimensions.
Finally, both stars and cubble support certain `{tidyverse}` functions. 

[^1]: Other packages also support spatio-temporal objects such as `{sftime}`, and further support will be implemented while `post` gets developed. 

```{r}
#| label: libraries
#| warning: false
#| message: false
library(post)
library(cubble)
library(stars)
library(sf)
library(tidyverse)
```

`post` combines the advantages of all these packages to support vector data cubes to structure and analyse polygon geometry time series.
For this, two classes are provided: `post_array` and `post_table`.

::: {.column-page layout="[35,38,27]" layout-valign="bottom"}

![Changing geometries](figs/geoms-complete-post.png)

![`post_array` class](figs/post_array-vdc.png)

![`post_table` class](figs/post_table-vdc.png)
:::

`post_array` inherits the `stars` class and therefore supports most of stars methods, including the print method. 

```{r}
methods(class = "post_array")
```

`post_table` inherits the `cubble` class and its subclasses `spatial_cubble_df` and `temporal_cubble_df`. 
Likewise, it supports most of the cubble methods and retains the cubble print methods.

```{r}
methods(class = "post_table")
```

## Creation and structure

To showcase the data structure of post objects a dummy dataset is provided with the package (`?polygons`). 

```{r}
polygons
```

The data has 5 objects with a unique group identifier that changes their shape for different timestamps.

```{r}
plot(polygons)
```

To create a post object a group identifier (`group_id`) is always required[^2].
This identifier should be unique per feature and within each group there should not exist duplicated timestamps. 

[^2]: Future implementation of `post` intends to introduce functions to group features when the group they belong to is unknown. 

Minimally, an sf object that is converted to a post object should have the following columns: 

1. a group identifier
2. a timestamp
3. changing geometries

When converting an sf object to a post object, the necessary arguments are automatically identified if not supplied. 

### `post_array` objects

`post_array` is a spatio-temporal array data structure that organises polygons that change their shape in space and time.
It extends the `stars` class for vector data cubes to support changing geometries as attributes.
The post_array class supports two dimensions: a summary geometry dimension (default name: `geom_sum`) and a temporal dimension.
The summary geometry is a unique geometry per group which summarises the changing shapes of the polygon geometries in the group.
To learn more about the data structure of post_array objects see `vignette("stars4", package = "stars")`.

Each array "cell" should have a value.
In case a particular summary geometry - temporal dimension combination does not exist, the changing geometry is stored as an empty geometry.
This behavior guarantees the dimensionality of the `post_array` object.

```{r}
(arr = as_post_array(polygons))
class(arr)
```

To extract the summary and changing geometries from `post_array` objects use:

```{r}
# changing geometry
arr$geometry
# summary geometry
st_geometry(arr)
```

The array format does not include the group identifiers in their data structure directly, since they are represented by the summary geometry.
However, these identifiers are stored as metadata and can be obtained as:

```{r}
get_group_ids(arr)
```

### `post_table` objects

`post_table` is a spatio-temporal tabular data structure that organises polygons that change their shape in space and time.
It extends the `cubble_df` classes for vector data cubes to support changing geometries in the temporal face of the cube.
The post_table geometry for the spatial face of the cube defaults to a column named `geom_sum`, while the changing geometry provided is passed on to the temporal face of the cube.
To learn more about the data structure of post_table objects see `vignette("cb1class", package = "cubble")`.

Contrary to `post_array` objects, `post_table` can handle gaps in its data, i.e., not every summary geometry - temporal combination should be present. 

```{r}
(tab = as_post_table(polygons))
class(tab)
(tab_temp = face_temporal(tab))
class(tab_temp)
```

To extract the summary and changing geometries from `post_table` objects use:

```{r}
# changing geometry
st_geometry(tab)
# summary geometry
st_geometry(tab_temp)
```

### Conversion between `post_*` objects

The functions `as_post_*()` can be used to convert objects between from `post_table` to `post_array` and viceversa.
This is particularly useful when certain methods and operations are only available for one class.

```{r}
tab |> as_post_array()
arr |> as_post_table()
```

For a conversion from `post_array` to `post_table` the argument `drop_empty` is available in case the post_array object has empty geometries. 
Dropping empty geometries is the default.

```{r}
set.seed(732)
(arr_empty = polygons[sample(nrow(polygons), 13), ] |> 
  as_post_array())
arr_empty$geometry

# converting to post_table
as_post_table(arr_empty) |> 
  face_temporal()
as_post_table(arr_empty, drop_empty = FALSE) |> 
  face_temporal()
```

## Visualisation

### Autoplot

For a quick visualisation of the post objects, you can use `ggplot2::autoplot()`. 
The plot will show individual facets according to the first non-spatial dimension for post_array objects and according to the time column for post_table objects. 

You can choose between visualising the attributes based on the summary or changing geometries.

```{r}
#| fig-width: 8
#| fig-height: 6
library(ggplot2)
autoplot(tab, gid)
autoplot(tab, gid, geom_sum = TRUE)
arr$area = st_area(arr$geometry)
autoplot(arr, area)
autoplot(arr, area, geom_sum = TRUE)
```

### Base R plot

If you don't have `ggplot2` installed, for `post_array` objects, the default `plot.stars` method is supported as well when the `post_array` object has non-spatial attributes. The geometry plotted is the summary geometry.

```{r}
plot(arr)
```

For `post_table` objects, the plot method (which defaults to `plot.sf()`) applied to the spatial face shows the summary geometry attributes, while the temporal face shows the changing geometries and its attributes. 

```{r}
plot(tab)
plot(face_temporal(tab))
```

If there are any attributes in the spatial face that you would like to see on the temporal face plot, you can unfold them.

```{r}
#| fig-width: 8
#| fig-height: 8
tab |> 
  face_temporal() |> 
  unfold("lat", "long") |> 
  plot()
```

### Customised plotting

If you want to achieve more complex visualisations, or just use another package of your choice, you can extract the data as an `sf` object from `post_array` and `post_table` objects and achieve this. 
Internally, this is what post is doing as well.

```{r}
arr = as_post_array(polygons, geometry_summary = summarise_geometry_union)
arr$area = st_area(arr$geometry)
arr$logical = sample(c(rep(TRUE, 20), rep(FALSE, 20)), 25, replace = F)
(arr_sf = st_as_sf(arr))
```

Note that the object has two geometry list-columns. Only one of them is active, defaulting to the changing geometries.

```{r}
attr(arr_sf, "sf_column")
```

You could for example want to add the summary geometry as background to identify easily how the geometries have changed over time, in comparison to their union.
For that you can create a new object with the summary geometry active.

```{r}
arr_sum = st_set_geometry(arr_sf, "geom_sum")
```

With that you can use more customised plotting with, for example, `ggplot2` to create nice maps of your data.

```{r}
#| fig-width: 8
#| fig-height: 8
ggplot(arr_sf) +
  geom_sf(data = arr_sum, fill = "grey80", color = NA) +
  geom_sf(aes(fill = area, color = logical), linewidth = 0.3) +
  scale_fill_viridis_c() +
  scale_color_manual(values = c("black", "red")) +
  facet_grid(rows = vars(gid), cols = vars(datetime)) +
  theme_bw()
```



